{"version":3,"sources":["leipzig/chord.cljc"],"mappings":";AAIA,AAAA,AAAAA,AAAOO,AAAYC,AAAWG;AAA9B,AAAA,AAAAV,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAsBK;AAAtBP,AAA0BQ;AAA1B,AACC,AAAID;AACED,AAAE,AAAA,AAACI,AAAWH,AAAGE,AAAG,AAAAE;AAAAC,AAAYJ;AAAZK,AAAeJ;AAAf,AAAA,AAAAE,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACR,AAAAA,AAAAA;;AACzBC;;;AAEH,AAAA,AAAOQ,AAAQR,AAAEG;AAAjB,AAAoB,AAACJ,AAAWC,AAAE,AAACS,AAAKT,AAAGG;;AAE3C;;;;AAAA,AAAMO,AAGHC,AAAMC;AAHT,AAGoBD,AAAM,AAACH,AAAO,AAACK,AAAWD;;AAE9C;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKE;AAIL;;;AAAKC,AAECD,AAAM,AAAA,AAAA,AAACE;AAEb;;;AAAKC,AAECF,AAAQ,AAAA,AAAA,AAACC;AAEf,AAAA,AAAME,AAAWP,AAAMQ;AAAvB,AAAA;AAGE,AAAMC,AAAO,AAAkB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAKF,AAAGG;AAClCC,AAAQ,AAACC,AAAe,AAAA,AAAIb,AAAMF,AAAKa,AAAKF;AADlD,AAEE,AAACrB,AAAWY,AAAM,AAAChB,AAAI4B,AAASE;;AAEpC;;;AAAA,AAAMC,AAEHf,AAAMV,AAAEkB;AAFX,AAGE,AAAA,AAACf,AAAUO,AAAOV,AAAG,AAACY,AAAWM","names":["p__28556","vec__28557","seq__28558","cljs.core/seq","first__28559","cljs.core/first","cljs.core/next","leipzig.chord/update-all","m","k","ks","f","cljs.core.update_in","G__28560","G__28561","G__28562","leipzig.chord/mapval","cljs.core/keys","leipzig.chord/root","chord","tonic","leipzig.scale/from","leipzig.chord/triad","leipzig.chord/seventh","cljs.core.assoc","leipzig.chord/ninth","leipzig.chord/inversion","n","stable","cljs.core.take","cljs.core/set","lowered","clojure.set.difference","leipzig.scale/lower","leipzig.chord/augment"],"sourcesContent":["(ns leipzig.chord\n  (:require [clojure.set :as set]\n            [leipzig.scale :as scale]))\n\n(defn- update-all [m [k & ks] f]\n (if k\n   (-> m (update-in [k] f) (update-all ks f))\n   m))\n\n(defn- mapval [m f] (update-all m (keys m) f))\n\n(defn root\n  \"Translates a chord so that its root is at tonic.\n  e.g. (-> triad (root 4))\" \n  [chord tonic] (-> chord (mapval (scale/from tonic)))) \n\n(def triad\n  \"A three-tone chord.\"\n  {:i 0, :iii 2, :v 4})\n\n(def seventh \n  \"A four-tone chord.\"\n  (-> triad (assoc :vii 6)))\n\n(def ninth \n  \"A five-tone chord.\"\n  (-> seventh (assoc :ix 8)))\n\n(defn inversion [chord n]\n  \"Drops all but the first n tones of the chord.\n  e.g. (-> triad (inversion 2))\"\n  (let [stable (->> [:i :iii :v] (take n) set) \n        lowered (set/difference (-> chord keys set) stable)]\n    (update-all chord (seq lowered) scale/lower)))\n\n(defn augment\n  \"Adds n to key k in the chord.\"\n  [chord k n]\n  (update-in chord [k] (scale/from n)))\n"]}