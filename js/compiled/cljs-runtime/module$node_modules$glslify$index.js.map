{
"version":3,
"file":"module$node_modules$glslify$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/glslify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$glslify$index\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar glslifyBundle = require('glslify-bundle')\r\nvar glslifyDeps   = require('glslify-deps/sync')\r\nvar nodeResolve   = require('resolve')\r\nvar path          = require('path')\r\nvar extend        = require('xtend')\r\nvar stackTrace    = require('stack-trace')\r\n\r\nmodule.exports = function(arg, opts) {\r\n  var isShaderString = /(void\\s+main\\s?\\(.*\\)|\\n)/.test(arg)\r\n  if (Array.isArray(arg)) { // template string\r\n    return iface().tag.apply(null, arguments)\r\n  } else if (typeof arg === 'string' && !isShaderString && opts && opts._flags) {\r\n    // browserify transform\r\n    return require('./transform.js').apply(this, arguments)\r\n  } else if (typeof arg === 'string' && isShaderString) { // source string\r\n    return iface().compile(arg, opts)\r\n  } else if (typeof arg === 'string') { // source file\r\n    return iface().file(arg, opts)\r\n  } else throw new Error('unhandled argument type: ' + typeof arg)\r\n}\r\nmodule.exports.compile = function(src, opts) {\r\n  return iface().compile(src, opts)\r\n}\r\nmodule.exports.file = function(file, opts) {\r\n  return iface().file(file, opts)\r\n}\r\n\r\nfunction iface () {\r\n  try { var basedir = path.dirname(stackTrace.get()[2].getFileName()) }\r\n  catch (err) { basedir = process.cwd() }\r\n  var posts = []\r\n  return { tag: tag, compile: compile, file: file }\r\n\r\n  function tag(strings) {\r\n    if (typeof strings === 'string') strings = [strings]\r\n    var exprs = [].slice.call(arguments, 1)\r\n    var parts = []\r\n    for (var i = 0; i < strings.length-1; i++) {\r\n      parts.push(strings[i], exprs[i] || '')\r\n    }\r\n    parts.push(strings[i])\r\n    return compile(parts.join(''))\r\n  }\r\n  function compile(src, opts) {\r\n    if (!opts) opts = {}\r\n    var depper = gdeps(opts)\r\n    var deps = depper.inline(src, opts.basedir || basedir)\r\n    return bundle(deps)\r\n  }\r\n  function file(filename, opts) {\r\n    if (!opts) opts = {}\r\n    var depper = gdeps(opts)\r\n    var deps = depper.add(path.resolve(opts.basedir || basedir, filename))\r\n    return bundle(deps)\r\n  }\r\n  function gdeps (opts) {\r\n    if (!opts) opts = {}\r\n    var depper = glslifyDeps({ cwd: opts.basedir || basedir })\r\n    var transforms = opts.transform || []\r\n    transforms = Array.isArray(transforms) ? transforms : [transforms]\r\n    transforms.forEach(function(transform) {\r\n      transform = Array.isArray(transform) ? transform : [transform]\r\n      var name = transform[0]\r\n      var opts = transform[1] || {}\r\n      if (opts.post) {\r\n        posts.push({ name: name, opts: opts })\r\n      } else {\r\n        depper.transform(name, opts)\r\n      }\r\n    })\r\n    return depper\r\n  }\r\n  function bundle (deps) {\r\n    var source = glslifyBundle(deps)\r\n    posts.forEach(function (tr) {\r\n      if (typeof tr.name === 'function') {\r\n        var transform = tr.name\r\n      } else {\r\n        var target = nodeResolve.sync(tr.name, { basedir: basedir })\r\n        var transform = require(target)\r\n      }\r\n      var src = transform((deps && deps[0] && deps[0].file) || null, source, { post: true })\r\n      if (src) source = src\r\n    })\r\n    return source\r\n  }\r\n}\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","iface","compile","src","opts","deps","gdeps","depper","inline","basedir","bundle","glslifyDeps","cwd","transforms","transform","Array","isArray","forEach","name","post","posts","push","source","glslifyBundle","tr","target","nodeResolve","sync","file","path","dirname","stackTrace","get","getFileName","err","process","tag","strings","exprs","slice","call","arguments","parts","i","length","join","filename","add","resolve","module.exports","arg","isShaderString","test","apply","_flags","Error","module.exports.compile","module.exports.file"]
}
