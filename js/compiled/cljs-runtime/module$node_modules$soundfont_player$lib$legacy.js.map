{
"version":3,
"file":"module$node_modules$soundfont_player$lib$legacy.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/soundfont-player/lib/legacy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$soundfont_player$lib$legacy\"] = function(global,require,module,exports) {\n'use strict'\n\nvar parser = require('note-parser')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected')\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API')\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')\n  Promise.all(this.promises).then(callback)\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.')\n  console.log('Please use Soundfont.instrument() instead.')\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = {name: name, play: oscillatorPlayer(ctx, options)}\n  this.instruments[name] = inst\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play\n      return inst\n    })\n    this.promises.push(promise)\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      promise.then(cb)\n    }\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      cb()\n    }\n  }\n  return inst\n}\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers (ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.')\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers\n  })\n}\nSoundfont.loadBuffers = loadBuffers\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer (ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {}\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.')\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\n    if (!freq) return\n\n    duration = duration || 0.2\n\n    options = options || {}\n    var destination = options.destination || defaultOptions.destination || ctx.destination\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\n    var gain = options.gain || defaultOptions.gain || 0.4\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = freq\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi\n\nmodule.exports = Soundfont\n\n};"],
"names":["shadow$provide","global","require","module","exports","Soundfont","ctx","nameToUrl","console","warn","log","instruments","promises","oscillatorPlayer","defaultOptions","note","time","duration","options","freq","midi","parser","midiToFreq","destination","vcoType","gain","vco","createOscillator","type","frequency","value","vca","createGain","connect","start","stop","prototype","onready","Soundfont.prototype.onready","callback","Promise","all","then","instrument","Soundfont.prototype.instrument","name","inst","play","promise","push","inst.onready","cb","loadBuffers","ac","buffers","noteToMidi"]
}
