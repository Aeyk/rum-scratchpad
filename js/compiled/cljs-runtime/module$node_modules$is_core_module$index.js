shadow$provide.module$node_modules$is_core_module$index=function(global,require,module,exports){function matchesRange(current,range){range=range.split(/ ?&& ?/);if(0===range.length)return!1;for(var i=0;i<range.length;++i){a:{var specifier=range[i];var JSCompiler_inline_result=current.split(".");var parts=specifier.split(" ");specifier=1<parts.length?parts[0]:"\x3d";parts=(1<parts.length?parts[1]:parts[0]).split(".");for(var i$jscomp$0=0;3>i$jscomp$0;++i$jscomp$0){var cur=parseInt(JSCompiler_inline_result[i$jscomp$0]||
0,10),ver=parseInt(parts[i$jscomp$0]||0,10);if(cur!==ver){JSCompiler_inline_result="\x3c"===specifier?cur<ver:"\x3e\x3d"===specifier?cur>=ver:!1;break a}}JSCompiler_inline_result="\x3e\x3d"===specifier}if(!JSCompiler_inline_result)return!1}return!0}function versionIncluded(nodeVersion,specifierValue){if("boolean"===typeof specifierValue)return specifierValue;var current="undefined"===typeof nodeVersion?process.versions&&process.versions.node&&process.versions.node:nodeVersion;if("string"!==typeof current)throw new TypeError("undefined"===
typeof nodeVersion?"Unable to determine current node version":"If provided, a valid node version is required");if(specifierValue&&"object"===typeof specifierValue){for(nodeVersion=0;nodeVersion<specifierValue.length;++nodeVersion)if(matchesRange(current,specifierValue[nodeVersion]))return!0;return!1}return matchesRange(current,specifierValue)}var process=require("module$node_modules$process$browser");"use strict";var has=require("module$node_modules$has$src$index"),data=require("module$node_modules$is_core_module$core_json");
module.exports=function(x,nodeVersion){return has(data,x)&&versionIncluded(nodeVersion,data[x])}}
//# sourceMappingURL=module$node_modules$is_core_module$index.js.map
