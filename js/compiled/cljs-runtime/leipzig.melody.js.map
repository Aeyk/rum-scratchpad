{"version":3,"sources":["leipzig/melody.cljc"],"mappings":"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","names":["leipzig.melody/bpm","beats","beat","leipzig.melody/having","k","values","notes","p1__28563#","p2__28564#","cljs.core.map","cljs.core.assoc","leipzig.melody/utter","object","time","duration","velocity","cljs.core/sequential?","p1__28565#","cljs.core.mapcat","cljs.core/map?","G__28566","G__28567","G__28568","G__28569","cljs.core/vals","cljs.core.sort","var_args","G__28572","leipzig.melody/phrase","js/Error","durations","pitches","velocities","wrap","x","counts","cljs.core.comp","cljs.core/count","normalised-pitches","cljs.core/repeat","normalised-durations","times","cljs.core.reductions","cljs.core/+","leipzig.melody.phrase","cljs.core.repeat","p1__28570#","cljs.core.dissoc","leipzig.melody/rhythm","leipzig.melody/is","cljs.core/constantly","leipzig.melody/if-applicable","applies?","f","leipzig.melody/wherever","p1__28573#","cljs.core.update_in","leipzig.melody/where","p1__28574#","cljs.core/contains?","leipzig.melody/all","v","leipzig.melody/after","wait","leipzig.scale/from","leipzig.melody/before?","a","b","G__28579","leipzig.melody/with","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","p__28580","p__28581","vec__28582","seq__28583","cljs.core/seq","first__28584","cljs.core/first","cljs.core/next","vec__28585","seq__28586","first__28587","seq28576","G__28577","G__28578","self__4723__auto__","other-as","as","other-bs","bs","cljs.core/empty?","cljs.core/cons","cljs.core/LazySeq","leipzig.melody.with$","others","cljs.core.reduce","leipzig.melody/but","start","end","variation","starts-in?","p__28588","map__28589","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","clip","p__28591","map__28592","note","cljs.core.filter","cljs.core/complement","leipzig.melody/duration","length","p__28594","map__28595","cljs.core/max","leipzig.melody/then","later","earlier","args__4742__auto__","argseq__4743__auto__","leipzig.melody/mapthen","seq28599","G__28600","melodies","cljs.core/map","p1__28598#","p2__28597#","leipzig.melody/times","n","leipzig.melody.mapthen","cljs.core/identity","leipzig.melody/tempo","timing","p__28601","map__28602","G__28604","leipzig.melody/accelerando","from","to","by","t","position","completion","extent","base","extra","rate"],"sourcesContent":["(ns leipzig.melody\n  (:require [leipzig.scale :as scale]))\n\n(defn bpm\n  \"Returns a function that translates a beat number into seconds.\n  e.g. ((bpm 90) 5)\" \n  [beats] (fn [beat] (-> beat (/ beats) (* 60))))\n\n(defn having\n  \"Zips an arbitrary quality onto a melody.\n  e.g. (->> (rhythm [1 1/2]) (having :drum [:kick :snare]))\"\n  [k values notes]\n  (map #(assoc %1 k %2) notes values))\n\n(defn utter [object time duration velocity]\n  (cond\n    (number? object)     [{:pitch object :time time :duration duration :velocity velocity}]\n    (sequential? object) (mapcat #(utter % time duration velocity) object)\n    (map? object)        (utter (-> object vals sort) time duration velocity)\n    (nil? object)        [{:time time :duration duration}]))\n\n(defn phrase\n  \"Translates a sequence of durations and pitches into a melody.\n  nil pitches signify rests, vectors represent clusters, and maps\n  represent chords. Vector durations represent repeated notes.\n  e.g. (phrase [1/2 1/2 3/2 3/2] [0 1 nil 4])\n  (phrase [1 1 2] [4 3 [0 2]])\n  (phrase [1 [1 2]] [4 3])\n  (phrase (repeat 4) (map #(-> triad (root %))) [0 3 4 3])\"\n  ([durations pitches velocities]\n   (let [wrap (fn [x] (if (sequential? x) x [x]))\n         counts (map (comp count wrap) durations)\n         normalised-pitches (mapcat repeat counts pitches)\n         normalised-durations (mapcat wrap durations)\n         times (reductions + 0 normalised-durations)]\n     (mapcat utter normalised-pitches times normalised-durations velocities)))\n  ([durations pitches]\n   (->> (phrase durations pitches (repeat nil))\n        (map #(dissoc % :velocity)))))\n\n(defn rhythm\n  \"Translates a sequence of durations into a rhythm.\n  e.g. (rhythm [1 1 2])\"\n  [durations]\n  (phrase durations (repeat nil)))\n\n(def is\n  \"Synonym for constantly.\n  e.g. (->> notes (wherever (comp not :part), :part (is :bass)))\"\n  constantly)\n\n(defn- if-applicable [applies? f] (fn [x] (if (applies? x) (f x) x)))\n(defn wherever\n  \"Applies f to the k key of each note wherever condition? returns true.\n  e.g. (->> notes (wherever (comp not :part), :part (is :piano))\"\n  [applies? k f notes]\n  (map\n    (if-applicable applies? #(update-in % [k] f))\n    notes))\n\n(defn where\n  \"Applies f to the k key of each note in notes, ignoring missing keys.\n  e.g. (->> notes (where :time (bpm 90)))\"\n  [k f notes]\n  (wherever #(contains? % k), k f notes))\n\n(defn all\n  \"Sets a constant value for each note of a melody.\n  e.g. (->> notes (all :part :drum))\"\n  [k v notes]\n  (wherever (is true), k (is v) notes))\n\n(defn after\n  \"Delay notes by wait.\n  e.g. (->> melody (after 3))\"\n  [wait notes] (where :time (scale/from wait) notes))\n\n(defn- before? [a b] (<= (:time a) (:time b)))\n(defn with\n  \"Blends melodies.\n  e.g. (->> melody (with bass drums))\"\n  ([[a & other-as :as as] [b & other-bs :as bs]]\n   (cond\n     (empty? as) bs\n     (empty? bs) as\n     (before? a b) (cons a (lazy-seq (with other-as bs)))\n     :otherwise    (cons b (lazy-seq (with as other-bs)))))\n  ([as bs & others] (reduce with (cons as (cons bs others)))))\n\n(defn but\n  \"Replaces part of a melody with another.\n  e.g. (->> notes (but 2 4 variation))\"\n  [start end variation notes]\n  (let [starts-in? (fn [{:keys [time]}]\n                     (and (<= start time) (< time end)))\n        clip (fn [{:keys [time duration] :as note}]\n               (if (and (< time start) (<= start (+ time duration)))\n                 (assoc note :duration (- start time))\n                 note))]\n    (->> notes\n         (filter (complement starts-in?))\n         (map clip)\n         (with (->> variation (after start))) )))\n\n(defn duration\n  \"Returns the total duration of notes.\n  e.g. (->> melody duration)\"\n  [notes]\n  (let [length (fn [{:keys [time duration]}] (+ time duration))]\n    (->> notes\n         (map length)\n         (reduce max 0))))\n\n(defn then \n  \"Sequences later after earlier.\n  e.g. (->> call (then response))\"\n  [later earlier]\n  (->> later\n       (after (duration earlier))\n       (with earlier)))\n\n(defn mapthen [f & melodies]\n  \"Apply f to each melody, then join them together.\n  e.g. (mapthen drop-last [bassline vocals])\"\n  (->> melodies\n       (apply map f)\n       (reduce #(then %2 %1))))\n\n(defn times\n  \"Repeats notes n times.\n  e.g. (->> bassline (times 4))\"\n  [n notes]\n  (->> notes\n       (repeat n)\n       (mapthen identity)))\n\n(defn tempo\n  \"Transform both :time and :duration according to timing.\n  e.g. (->> notes (tempo (bpm 120)))\"\n  [timing notes]\n  (->> notes\n       (map (fn [{start :time duration :duration :as note}]\n              (-> note\n                  (assoc :duration (- (timing (+ start duration))\n                                      (timing start))))))\n       (where :time timing)))\n\n(defn accelerando\n  \"Linearly interpolated change between from and to.\n  e.g. (->> notes (tempo (accelerando 0 4 3/2))))\"\n  [from to by]\n  (fn rate [t]\n    (cond\n      (>= from t) t\n      (>= to t) (let [duration (- to from)\n                      position (- t from)\n                      completion (/ position duration)\n                      extent (- by 1)\n                      base t\n                      extra (* position #? (:clj 1/2 :cljs 0.5) completion extent)]\n                  (+ base extra))\n      :otherwise (+ (rate to) (* by (- t to))))))\n"]}