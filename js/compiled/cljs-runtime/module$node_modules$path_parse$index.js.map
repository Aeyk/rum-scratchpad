{
"version":3,
"file":"module$node_modules$path_parse$index.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/path-parse/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$path_parse$index\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into three parts: [*, device, slash,\n// tail] windows-only\nvar splitDeviceRe =\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n// Regex to split the tail part of the above into [*, dir, basename, ext]\nvar splitTailRe =\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\n\nvar win32 = {};\n\n// Function to split a filename into [root, dir, basename, ext]\nfunction win32SplitPath(filename) {\n  // Separate device+slash from tail\n  var result = splitDeviceRe.exec(filename),\n      device = (result[1] || '') + (result[2] || ''),\n      tail = result[3] || '';\n  // Split the tail into dir, basename and extension\n  var result2 = splitTailRe.exec(tail),\n      dir = result2[1],\n      basename = result2[2],\n      ext = result2[3];\n  return [device, dir, basename, ext];\n}\n\nwin32.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\nposix.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  allParts[1] = allParts[1] || '';\n  allParts[2] = allParts[2] || '';\n  allParts[3] = allParts[3] || '';\n\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n\nif (isWindows)\n  module.exports = win32.parse;\nelse /* posix */\n  module.exports = posix.parse;\n\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;\n\n};"],
"names":["shadow$provide","global","require","module","exports","process","isWindows","platform","splitDeviceRe","splitTailRe","parse","win32.parse","pathString","TypeError","result","exec","device","result2","dir","basename","ext","allParts","length","root","slice","base","name","splitPathRe","posix.parse","posix","win32"]
}
