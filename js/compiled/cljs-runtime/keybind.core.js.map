{"version":3,"sources":["keybind/core.cljs"],"mappings":"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","names":["keybind.core/MODS","js/navigator.userAgent","keybind.core/KEYATTRS","keybind.core/DEFCHORD","keybind.core/KEYS","cljs.core.merge","cljs.core.into","iter__4529__auto__","s__37018","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__37020","cljs.core/chunk-buffer","i__37019","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37017","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__37030","b__37032","i__37031","iter__37029","s__37034","b__37036","i__37035","iter__37033","s__37044","b__37046","i__37045","iter__37043","js/String.fromCharCode","keybind.core/KNOWN-KEYS","s__37053","b__37055","i__37054","vec__37063","cljs.core.nth","iter__37052","vec__37072","k","v","js/keybind","js/keybind.core","js/keybind.core.BINDINGS","keybind.core/BINDINGS","cljs.core.atom","js/keybind.core.PRESSED","keybind.core/PRESSED","js/keybind.core.ENABLED?","keybind.core/ENABLED?","keybind.core/button->code","button","temp__5733__auto__","code","cljs.core.get","keybind.core/parse-chord","keystring","vec__37084","bits","mods","js/Error","cljs.core.drop_last","p1__37083#","cljs.core.map","or__4126__auto__","cljs.core/mod","cljs.core.reduce","mod","cljs.core.assoc","keybind.core/parse","chain","cljs.core.mapv","keybind.core/e->chord","e","s__37088","b__37090","i__37089","vec__37099","iter__37087","vec__37109","key","attr","keybind.core/reset-sequence!","cljs.core.swap_BANG_","cljs.core/empty","keybind.core/dispatch","bindings","chord","sequence","cljs.core/deref","cljs.core.conj","inner","cljs.core.get_in","handlers","cljs.core/not","seq__37131","chunk__37132","count__37133","i__37134","vec__37151","c__4556__auto__","cljs.core/chunk-first","vec__37157","cljs.core/next","_","handler","cljs.core/reset!","keybind.core/bind","spec","cb","parsed","cljs.core/assoc-in","keybind.core/unbind","cljs.core.update_in","cljs.core/dissoc","keybind.core/bind!","keybind.core/unbind!","keybind.core/unbind-all!","keybind.core/disable!","keybind.core/enable!","keybind.core/dispatcher!","and__4115__auto__","js/keybind.core.bind-keypress-listener","keybind.core/bind-keypress-listener","js/addEventListener"],"sourcesContent":["(ns keybind.core)\n\n;; Definitions\n\n(def MODS\n  {\"shift\" :shift\n   \"ctrl\" :ctrl \"control\" :ctrl \"C\" :ctrl\n   \"alt\" :alt \"option\" :alt \"M\" :alt\n   \"win\" :meta \"cmd\" :meta \"super\" :meta \"meta\" :meta \"S\" :meta\n   ;; default modifier for OS X is cmd and for others is ctrl\n   \"defmod\" (if (neg? (.indexOf js/navigator.userAgent \"Mac OS X\"))\n              :ctrl :meta)})\n\n(def KEYATTRS\n  {:shift \"shiftKey\" :ctrl \"ctrlKey\" :alt \"altKey\" :meta \"metaKey\"\n   :code \"keyCode\"})\n\n(def DEFCHORD {:shift false :ctrl false :alt false :meta false})\n\n(def KEYS\n  (merge {\"backspace\" 8,\n          \"tab\" 9,\n          \"enter\" 13, \"return\" 13,\n          \"pause\" 19,\n          \"caps\" 20, \"capslock\" 20,\n          \"escape\" 27, \"esc\" 27,\n          \"space\" 32,\n          \"pgup\" 33, \"pageup\" 33,\n          \"pgdown\" 34, \"pagedown\" 34,\n          \"end\" 35,\n          \"home\" 36,\n          \"ins\" 45, \"insert\" 45,\n          \"del\" 46, \"delete\" 46,\n\n          \"left\" 37,\n          \"up\" 38,\n          \"right\" 39,\n          \"down\" 40,\n\n          \"*\" 106,\n          \"+\" 107, \"plus\" 107, \"kpplus\" 107,\n          \"kpminus\" 109,\n          \";\" 186,\n          \"=\" 187,\n          \",\" 188,\n          \"-\" 189, \"minus\" 189,\n          \".\" 190,\n          \"/\" 191,\n          \"`\" 192,\n          \"[\" 219,\n          \"\\\\\" 220,\n          \"]\" 221,\n          \"'\" 222\n          }\n\n    ;; numpad\n    (into {} (for [i (range 10)]\n               [(str \"num-\" i) (+ 95 i)]))\n\n    ;; top row 0-9\n    (into {} (for [i (range 10)]\n               [(str i) (+ 48 i)]))\n\n    ;; f1-f24\n    (into {} (for [i (range 1 25)]\n               [(str \"f\" i) (+ 111 i)]))\n\n    ;; alphabet\n    (into {} (for [i (range 65 91)]\n               [(.toLowerCase (js/String.fromCharCode i)) i]))))\n\n(def ^:private KNOWN-KEYS\n  (into {} (for [[k v] KEYS]\n             [v k])))\n\n;; Data\n\n(defonce BINDINGS (atom {}))\n(defonce PRESSED (atom []))\n\n(defonce ENABLED? (atom true))\n\n;; Behavior\n\n(defn button->code [button]\n  (if-let [code (get KEYS button)]\n    [code nil]\n    [(get KEYS (.toLowerCase button)) {:shift true}]))\n\n(defn parse-chord [keystring]\n  (let [bits        (.split keystring #\"-(?!$)\")\n        button      (nth bits (-> bits count dec))\n        [code mods] (button->code button)]\n\n    (when-not code\n      (throw (js/Error. (str \"Unknown key '\" button\n                          \"' in keystring '\" keystring \"'\"))))\n\n    (->> (drop-last bits)\n         (map #(or (get MODS %)\n                   (throw (js/Error. (str \"Unknown modifier '\" mod\n                                       \"' in keystring '\" keystring \"'\")))))\n         (reduce\n           (fn [mods mod] (assoc mods mod true))\n           (merge DEFCHORD {:code code} mods)))))\n\n(defn parse [chain]\n  (let [bits (.split chain \" \")]\n    (mapv parse-chord bits)))\n\n(defn e->chord [e]\n  (into {} (for [[key attr] KEYATTRS]\n             [key (aget e attr)])))\n\n(defn reset-sequence! []\n  (swap! PRESSED empty))\n\n(defn dispatch [e bindings]\n  (let [chord    (e->chord e)\n        sequence (conj @PRESSED chord)\n        inner    (get-in bindings sequence)\n        handlers (:handlers inner)]\n    (cond\n      (not inner) (reset-sequence!)\n      handlers    (do\n                    (doseq [[_ handler] (:handlers inner)]\n                      (handler e sequence))\n                    (reset-sequence!))\n      :else       (reset! PRESSED sequence))))\n\n(defn bind [bindings spec key cb]\n  \"Same as `bind!`, just modifies `bindings` map, you have to handle\n  storage (like an atom) yourself.\"\n  (let [parsed (parse spec)]\n    (assoc-in bindings (conj parsed :handlers key) cb)))\n\n(defn unbind [bindings spec key]\n  \"Same as `unbind!`, just modifies `bindings` map, you have to handle\n  storage (like an atom) yourself.\"\n  (let [parsed (parse spec)]\n    (update-in bindings (conj parsed :handlers) dissoc key)))\n\n;; Main external API\n\n(defn bind! [spec key cb]\n  \"Binds a sequence of button presses, specified by `spec`, to `cb` when\n  pressed. Keys must be unique per `spec`, and can be used to remove keybinding\n  with `unbind!`.\n\n  `spec` format is emacs-like strings a-la \\\"ctrl-c k\\\", \\\"meta-shift-k\\\", etc.\"\n  (swap! BINDINGS bind spec key cb))\n\n(defn unbind! [spec key]\n  \"Removes a callback, identified by `key`, from button sequence `spec`.\"\n  (swap! BINDINGS unbind spec key))\n\n(defn unbind-all! []\n  \"Remove all BINDINGS\"\n  (reset-sequence!)\n  (swap! BINDINGS empty))\n\n(defn disable! []\n  \"Disable dispatching of key events (but leave existing bindings intact).\"\n  (reset! ENABLED? false))\n\n(defn enable! []\n  \"Enable dispatching of key events via the existing bindings.\"\n  (reset! ENABLED? true))\n\n(defn dispatcher! [bindings]\n  \"Return a function to be bound on `keydown` event, preferably globally.\n  Accepts atom with bindings.\n\n  Is bound by default with `keycode/BINDINGS` atom, so you don't need to use\n  that.\"\n  (fn [e]\n    (when (and @ENABLED? (get KNOWN-KEYS (.-keyCode e)))\n      (dispatch e @bindings))))\n\n;; Global key listener\n\n(defonce bind-keypress-listener\n  (js/addEventListener \"keydown\" (dispatcher! BINDINGS) false))\n"]}