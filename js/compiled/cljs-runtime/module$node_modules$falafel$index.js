shadow$provide.module$node_modules$falafel$index=function(global,require,module,exports){function insertHelpers(node,parent,chunks){function update(s){chunks[node.start]=s;for(s=node.start+1;s<node.end;s++)chunks[s]=""}node.parent=parent;node.source=function(){return chunks.slice(node.start,node.end).join("")};if(node.update&&"object"===typeof node.update){var prev=node.update;forEach(objectKeys(prev),function(key){update[key]=prev[key]})}node.update=update}var acorn=require("module$node_modules$acorn$dist$acorn"),
isArray=require("module$node_modules$isarray$index"),objectKeys=require("module$node_modules$object_keys$index"),forEach=require("module$node_modules$foreach$index"),util=require("module$node_modules$util$util");module.exports=function(src,opts,fn){"function"===typeof opts&&(fn=opts,opts={});src&&"object"===typeof src&&"Buffer"===src.constructor.name?src=src.toString():src&&"object"===typeof src&&(opts=src,src=opts.source,delete opts.source);src=void 0===src?opts.source:src;"string"!==typeof src&&
(src=String(src));opts=(opts.parser||acorn).parse(src,opts);var result={chunks:src.split(""),toString:function(){return result.chunks.join("")},inspect:function(){return result.toString()}};util.inspect.custom&&(result[util.inspect.custom]=result.toString);(function walk(node,parent){insertHelpers(node,parent,result.chunks);forEach(objectKeys(node),function(key){"parent"!==key&&(key=node[key],isArray(key)?forEach(key,function(c){c&&"string"===typeof c.type&&walk(c,node)}):key&&"string"===typeof key.type&&
walk(key,node))});fn(node)})(opts,void 0);return result}}
//# sourceMappingURL=module$node_modules$falafel$index.js.map
