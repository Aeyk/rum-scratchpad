shadow$provide.module$node_modules$glslify_bundle$index=function(global,require,module,exports$jscomp$0){function Bundle(deps){if(!(this instanceof Bundle))return new Bundle(deps);this.depList=deps=topoSort(deps);this.depIndex=indexBy(deps,"id");this.exported={};this.cache={};this.varCounter=0;this.src=[];for(var i=0;i<deps.length;i++)this.preprocess(deps[i]);for(i=0;i<deps.length;i++)deps[i].entry&&(this.src=this.src.concat(this.bundle(deps[i])));this.src=string(this.src);this.src=string(clean(trim(tokenize(this.src))))}
function indexBy(deps$jscomp$0,key){return deps$jscomp$0.reduce(function(deps,entry){deps[entry[key]]=entry;return deps},{})}function toMapping(maps){return maps?maps.reduce(function(mapping,defn){defn=defn.split(/\s?=\s?/g);var expr=defn.pop();defn.forEach(function(key){mapping[key]=expr});return mapping},{}):!1}var hash=require("module$node_modules$murmurhash_js$murmurhash3_gc"),trim=require("module$node_modules$glsl_token_whitespace_trim$index"),tokenize=require("module$node_modules$glsl_tokenizer$string"),
inject=require("module$node_modules$glsl_inject_defines$string"),defines=require("module$node_modules$glsl_token_defines$index"),descope=require("module$node_modules$glsl_token_descope$index"),clean=require("module$node_modules$glslify_bundle$lib$clean_suffixes"),string=require("module$node_modules$glsl_token_string$index"),scope=require("module$node_modules$glsl_token_scope$index"),depth=require("module$node_modules$glsl_token_depth$index"),topoSort=require("module$node_modules$glslify_bundle$lib$topo_sort"),
copy=require("module$node_modules$shallow_copy$index");module.exports=function(deps){return inject(Bundle(deps).src,{GLSLIFY:1})};global=Bundle.prototype;global.preprocess=function(dep){var tokens=tokenize(dep.source),imports=[],exports=null;depth(tokens);scope(tokens);for(var i=0;i<tokens.length;i++){var token=tokens[i];if("preprocessor"===token.type&&/#pragma glslify:/.test(token.data)){var exported=/#pragma glslify:\s*export\(([^)]+)\)/.exec(token.data);token=/#pragma glslify:\s*([^=\s]+)\s*=\s*require\(([^)]+)\)/.exec(token.data);
if(exported)exports=exported[1],tokens.splice(i--,1);else if(token){exported=token[1];token=token[2].split(/\s?,\s?/g);var path=token.shift().trim().replace(/^'|'$/g,"").replace(/^"|"$/g,"");imports.push({name:exported,path,target:this.depIndex[dep.deps[path]],maps:toMapping(token),index:i});tokens.splice(i--,1)}}}(i=tokens[tokens.length-1])&&"eof"===i.type&&tokens.pop();dep.entry&&(exports=exports||"main");if(!exports)throw Error(dep.file+" does not export any symbols");dep.parsed={tokens,imports,
exports}};global.bundle=function(entry){function resolve(dep,bindings){bindings.sort();var ident=bindings.join(":")+":"+dep.id,suffix="_"+hash(ident);dep.entry&&(suffix="");ident=dep.parsed.exports+suffix;if(resolved[ident])return[ident,[]];for(var rename={},i=0;i<bindings.length;++i){var binding=bindings[i];rename[binding[0]]=binding[1]}binding=dep.parsed.imports;bindings=[];for(i=0;i<binding.length;++i){var data=binding[i],importMaps=data.maps,importName=data.name,importTarget=data.target,importBindings=
Object.keys(importMaps).map(function(id){var value=importMaps[id];if(value.match(/^\d+(?:\.\d+?)?$/g))return[id,value];var parent=value.match(/^([^.]+)\.(.+)$/);return parent?[id,(rename[parent[1]]||parent[1]+suffix)+"."+parent[2]]:[id,rename[value]||value+suffix]});importTarget=resolve(importTarget,importBindings);rename[importName]=importTarget[0];bindings.push([data.index,importTarget[1]])}i=dep.parsed.tokens.map(copy);var parsedDefs=defines(i);dep=descope(i,function(local,token){return parsedDefs[local]?
local:rename[local]?rename[local]:local+suffix});bindings.sort(function(a,b){return b[0]-a[0]});for(i=0;i<bindings.length;++i)binding=bindings[i],dep=dep.slice(0,binding[0]).concat(binding[1]).concat(dep.slice(binding[0]));resolved[ident]=!0;return[ident,dep]}var resolved={};return resolve(entry,[])[1]}}
//# sourceMappingURL=module$node_modules$glslify_bundle$index.js.map
