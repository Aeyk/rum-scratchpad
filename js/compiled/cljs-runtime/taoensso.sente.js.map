{"version":3,"sources":["taoensso/sente.cljc"],"mappings":"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","names":["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","taoensso.sente/sente-version","taoensso.sente/node-target?","cljs.core._EQ_","cljs.core/*target*","js/taoensso","js/taoensso.sente","js/taoensso.sente.debug-mode?_","taoensso.sente/debug-mode?_","cljs.core.atom","taoensso.sente/expected","expected","x","cljs.core/type","taoensso.sente/validate-event","cljs.core/not","G__35910","fexpr__35909","cljs.core/count","vec__35911","cljs.core.nth","ev-id","_","cljs.core/Keyword","cljs.core/namespace","taoensso.sente/assert-event","temp__5735__auto__","errs","cljs.core.ex_info","taoensso.sente/event?","taoensso.sente/as-event","temp__5733__auto__","taoensso.sente/client-event-msg?","cljs.core/map?","taoensso.encore/ks>=","map__35918","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","ch-recv","send-fn","state","event","taoensso.encore/chan?","cljs.core/ifn?","taoensso.encore/atom?","taoensso.sente/server-event-msg?","map__35924","connected-uids","send-buffers","ring-req","client-id","?reply-fn","taoensso.encore/nblank-str?","p__35926","map__35927","taoensso.sente/put-server-event-msg>ch-recv!","ev-msg","vec__35929","ev-?data","valid-event","ev-msg*","cljs.core.merge","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.async.put_BANG_","taoensso.sente/cb-error?","cb-reply-clj","fexpr__35932","taoensso.sente/cb-success?","taoensso.sente/unpack","packer","prefixed-pstr","taoensso.truss.impl/-invar-violation!","vec__35933","wrapped?","taoensso.encore/str-starts-with?","pstr","cljs.core.subs","clj","e35936","taoensso.sente.interfaces/unpack","t","?cb-uuid","var_args","G__35938","taoensso.sente/pack","js/Error","taoensso.sente.interfaces/pack","wrapped-clj","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","taoensso.sente/EdnPacker","taoensso.sente/->EdnPacker","taoensso.encore.pr_edn","s","taoensso.encore.read_edn","taoensso.sente/default-edn-packer","taoensso.sente/coerce-packer","e","p1__35939#","taoensso.truss.impl/-dummy-error","e35940","cljs.core/native-satisfies?","taoensso.sente.interfaces/IPacker","taoensso.sente/next-idx!","taoensso.encore/idx-fn","p__35943","map__35944","taoensso.sente/bad-origin?","allowed-origins","headers","origin","referer","cljs.core/contains?","cljs.core/set","p1__35942#","taoensso.encore/rsome","clojure.string/starts-with?","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","taoensso.sente/make-channel-socket-server!","p__35949","vec__35950","map__35953","seq35947","G__35948","cljs.core/first","cljs.core/next","self__4723__auto__","web-server-ch-adapter","recv-buf-or-n","ws-kalive-ms","lp-timeout-ms","send-buf-ms-ajax","send-buf-ms-ws","user-id-fn","bad-csrf-fn","bad-origin-fn","csrf-token-fn","handshake-data-fn","authorized?-fn","unauthorized-fn","cljs.core.async/sliding-buffer","taoensso.encore.ms","cljs.core.get_in","_ring-req","or__4126__auto__","e35955","e35956","taoensso.encore/pos-int?","p1__35946#","e35957","taoensso.sente.interfaces/IServerChanAdapter","max-ms","taoensso.sente/default-client-side-ajax-timeout-ms","fexpr__35960","cljs.core/set?","cljs.core.async.chan","G__35962","cljs.core.assoc","conns_","send-buffers_","connected-uids_","upd-conn!","conn-type","uid","taoensso.encore.swap_in_BANG_","?v","vec__35963","?sch","_udt","new-udt","taoensso.encore/now-udt","taoensso.encore/swapped","new-?sch","connect-uid!","taoensso.truss.impl/some?","e35966","newly-connected?","p__35967","map__35968","ws","ajax","any","old-m","new-m","G__35970","cljs.core.conj","old-any","new-any","upd-connected-uid!","e35971","newly-disconnected?","p__35972","map__35973","cljs.core/deref","conns'","any-ws-clients?","any-ajax-clients?","any-clients?","cljs.core.disj","p__35975","vec__35976","map__35979","user-id","ev","opts","flush?","ev-uuid","taoensso.encore.uuid_str","flush-buffer!","pulled","m","vec__35981","ev-uuids","cljs.core.dissoc","vec__35984","buffered-evs","buffered-evs-ppstr","taoensso.sente.pack","G__35987","taoensso.sente/send-buffered-server-evs>ws-clients!","taoensso.sente/send-buffered-server-evs>ajax-clients!","seq__35988","cljs.core/seq","chunk__35989","count__35990","i__35991","vec__35998","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__36001","cljs.core/vals","sch","taoensso.sente.interfaces/sch-close!","seq__36004","chunk__36005","count__36006","i__36007","vec__36014","vec__36017","seq__36020","chunk__36021","count__36022","i__36023","vec__36030","vec__36033","ws-timeout","cljs.core.async/timeout","ajax-timeout","c__26467__auto__","cljs.core.async.impl.dispatch/run","f__26468__auto__","switch__26444__auto__","state_36040","state_val_36041","cljs.core.async.impl.ioc-helpers/take!","inst_36037","inst_36038","statearr-36042","cljs.core.async.impl.ioc-helpers/return-chan","statearr-36043","state-machine__26445__auto__","ret-value__26446__auto__","result__26447__auto__","cljs.core/keyword-identical?","ex__26448__auto__","e36044","statearr-36045","statearr-36046","state__26469__auto__","statearr-36047","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_36052","state_val_36053","inst_36049","inst_36050","statearr-36054","statearr-36055","e36056","statearr-36057","statearr-36058","statearr-36059","bad-csrf?","reference-csrf-token","csrf-token-from-client","taoensso.encore/const-str=","unauthorized?","possible-rejection-resp","ev-msg-const","b2__28925__auto__","resp","taoensso.sente.interfaces/ring-req->server-ch-resp","server-ch","websocket?","vec__36060","params","ppstr","has-cb?","reply-fn","replied?_","resp-clj","cljs.core/compare-and-set!","taoensso.sente.interfaces/sch-send!","ms","state_36068","state_val_36069","inst_36063","inst_36065","inst_36066","statearr-36070","statearr-36071","e36072","statearr-36073","statearr-36074","statearr-36075","sch-uuid","receive-event-msg!","taoensso$sente$self","send-handshake!","?handshake-data","handshake-ev","clojure.string/blank?","err-msg","updated-conn","udt-open","state_36112","state_val_36113","inst_36108","statearr-36114","inst_36076","inst_36077","statearr-36115","statearr-36116","inst_36086","inst_36081","inst_36082","inst_36083","cljs.core/PersistentVector","inst_36084","inst_36085","statearr-36117","statearr-36118","statearr-36119","inst_36092","inst_36101","statearr-36120","statearr-36121","statearr-36122","inst_36110","statearr-36123","inst_36079","inst_36097","inst_36098","statearr-36124","statearr-36125","inst_36091","inst_36093","statearr-36126","statearr-36127","statearr-36128","inst_36105","statearr-36129","inst_36095","statearr-36130","statearr-36131","statearr-36132","e36133","statearr-36134","statearr-36135","statearr-36136","taoensso.sente.interfaces/sch-open?","handshake?","state_36162","state_val_36163","inst_36137","inst_36144","inst_36139","inst_36140","inst_36141","inst_36142","inst_36143","statearr-36164","statearr-36165","statearr-36166","inst_36149","inst_36150","inst_36151","statearr-36167","statearr-36168","statearr-36169","statearr-36170","inst_36160","inst_36153","inst_36154","statearr-36171","statearr-36172","inst_36157","statearr-36173","statearr-36174","e36175","statearr-36176","statearr-36177","statearr-36178","req-ppstr","vec__36179","_status","udt-close","state_36233","state_val_36234","statearr-36235","inst_36182","statearr-36236","statearr-36237","inst_36194","inst_36192","inst_36210","inst_36193","inst_36205","inst_36206","inst_36207","inst_36209","vec__36185","statearr-36241","statearr-36242","statearr-36243","inst_36197","inst_36198","inst_36199","statearr-36244","inst_36219","inst_36220","inst_36221","inst_36222","statearr-36245","inst_36184","inst_36188","inst_36189","inst_36190","inst_36191","inst_36195","statearr-36246","statearr-36247","statearr-36248","inst_36228","statearr-36249","inst_36212","inst_36213","inst_36214","inst_36215","inst_36216","inst_36217","statearr-36250","statearr-36251","statearr-36252","inst_36202","inst_36203","statearr-36253","statearr-36254","statearr-36255","inst_36225","statearr-36256","statearr-36257","inst_36231","statearr-36258","e36259","statearr-36260","statearr-36261","statearr-36262","_?sch","udt-t1","disconnect?","p__36208","vec__36238","_sch","?m","cljs.core/empty?","error","buffered-evs-pstr","seq__36263","chunk__36264","count__36265","i__36266","vec__36279","vec__36282","vec__36285","vec__36288","ms-backoffs","client-ids-unsatisfied","cljs.core/keys","state_36337","state_val_36338","inst_36293","inst_36292","inst_36299","inst_36309","inst_36310","cljs.core/PersistentHashSet","inst_36311","statearr-36342","inst_36291","statearr-36343","statearr-36344","statearr-36345","inst_36330","statearr-36346","inst_36316","inst_36321","inst_36322","inst_36323","inst_36306","statearr-36347","statearr-36348","statearr-36349","inst_36335","inst_36333","statearr-36350","inst_36295","inst_36296","inst_36297","inst_36298","inst_36300","taoensso.truss.impl/non-throwing","inst_36301","statearr-36354","statearr-36355","statearr-36356","statearr-36357","inst_36314","inst_36315","statearr-36358","statearr-36359","statearr-36360","inst_36304","statearr-36361","statearr-36362","inst_36325","inst_36326","statearr-36363","statearr-36364","inst_36318","inst_36319","statearr-36365","statearr-36366","statearr-36367","statearr-36368","e36369","statearr-36370","statearr-36371","statearr-36372","n","client-ids-satisfied","?pulled","ks-to-pull","cljs.core.remove","cljs.core.reduce","k","vec__36351","udt","cljs.core/select-keys","cljs.core/reduce-kv","p__36308","vec__36339","sent?","cljs.core.into","cljs.core/complement","cljs.core/rand-int","taoensso.sente/ajax-lite","taoensso.encore/ajax-lite","taoensso$sente$IChSocket$_chsk_connect_BANG_$dyn","x__4428__auto__","m__4429__auto__","taoensso.sente/-chsk-connect!","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","taoensso$sente$IChSocket$_chsk_disconnect_BANG_$dyn","taoensso.sente/-chsk-disconnect!","taoensso$sente$IChSocket$_chsk_reconnect_BANG_$dyn","taoensso.sente/-chsk-reconnect!","taoensso$sente$IChSocket$_chsk_send_BANG_$dyn","taoensso.sente/-chsk-send!","taoensso.sente/IChSocket","chsk","reason","taoensso.sente/chsk-connect!","taoensso.sente/chsk-disconnect!","taoensso.sente/chsk-reconnect!","taoensso.sente/chsk-destroy!","G__36374","taoensso.sente/chsk-send!","taoensso.sente.chsk_send_BANG_","?timeout-ms","?cb","cljs.core/boolean","taoensso.sente/chsk-send->closed!","?cb-fn","taoensso.sente/assert-send-args","taoensso.encore/nat-int?","taoensso.sente/pull-unused-cb-fn!","cbs-waiting_","cb-uuid","?f","taoensso.sente/swap-chsk-state!","f","vec__36375","old-state","new-state","cljs.core.not_EQ_","output","taoensso.sente/chsk-state->closed","e36378","G__36380","taoensso.truss.impl/set*","e36379","taoensso.sente/cb-chan-as-fn","e36381","vec__36382","cb-ch","reply","cljs.core.keyword","taoensso.encore/as-qname","taoensso.sente/receive-buffered-evs!","chs","seq__36385","chunk__36386","count__36387","i__36388","vec__36395","vec__36398","id","taoensso.sente/handshake?","vec__36404","x1","taoensso.sente/receive-handshake!","chsk-type","G__36409","e36408","e36410","vec__36411","vec__36414","map__36417","?uid","ever-opened?_","first-handshake?","p1__36407#","taoensso.sente/?node-npm-websocket_","make-package-name","prefix","require-fn","js/require","cljs.core/constantly","e36419","G__36420","p__36421","map__36422","taoensso.sente/create-js-client-websocket!","onerror-fn","onmessage-fn","onclose-fn","uri-str","WebSocket","taoensso.encore.oget","goog/global","socket","G__36424","p__36425","map__36426","taoensso.sente/create-websocket!","this__4380__auto__","k__4381__auto__","this__4382__auto__","k36435","else__4383__auto__","G__36439","url","state_","instance-handle_","retry-count_","backoff-ms-fn","socket_","udt-last-comms_","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__36440","vec__36441","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__36434","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this36436","other36437","this__4389__auto__","k__4390__auto__","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__36444","expr__36445","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/-nth","cljs.core/-conj","taoensso.sente/ChWebSocket","this__4423__auto__","cljs.core/List","writer__4424__auto__","G__36438","extmap__4419__auto__","G__36526","cljs.core/record?","taoensso.sente/->ChWebSocket","taoensso.sente/map->ChWebSocket","cljs.core/reset!","p1__36428#","map__36447","taoensso.encore.reset_in_BANG_","e36449","timeout-ms","state_36460","state_val_36461","inst_36450","inst_36453","inst_36452","statearr-36462","statearr-36463","statearr-36464","inst_36455","statearr-36465","statearr-36466","inst_36458","statearr-36467","e36468","statearr-36469","statearr-36470","statearr-36471","e36472","cb-fn*","e36473","instance-handle","have-handle?","connect-fn","retry-fn","retry-count*","cljs.core.swap_BANG_","cljs.core/inc","backoff-ms","udt-next-reconnect","p1__36429#","ws-ev","e36474","cljs.core.js__GT_clj","p1__36430#","vec__36475","cb-fn","last-ws-close","p1__36432#","p1__36433#","?socket","e36478","taoensso.encore/merge-url-with-query-string","old-socket","state_36506","state_val_36507","inst_36502","statearr-36508","statearr-36509","inst_36483","inst_36484","statearr-36510","statearr-36511","statearr-36512","statearr-36513","inst_36504","inst_36480","inst_36481","statearr-36514","statearr-36515","inst_36486","inst_36487","statearr-36516","statearr-36517","inst_36498","statearr-36518","statearr-36519","inst_36489","inst_36490","inst_36491","inst_36492","inst_36493","inst_36494","cljs.core/PersistentHashMap","inst_36495","statearr-36520","statearr-36521","e36522","statearr-36523","statearr-36524","statearr-36525","taoensso.sente/new-ChWebSocket","csrf-token","k36534","G__36538","ajax-opts","curr-xhr_","p__36539","vec__36540","G__36533","this36535","other36536","pred__36543","expr__36544","taoensso.sente/ChAjaxSocket","G__36537","G__36566","taoensso.sente/->ChAjaxSocket","taoensso.sente/map->ChAjaxSocket","p1__36527#","map__36546","G__36548","G__36549","G__36550","p__36551","map__36552","?error","?content","p1__36528#","vec__36554","content","resp-ppstr","p1__36529#","poll-fn","retry-count","p1__36530#","G__36557","G__36558","G__36559","p__36560","map__36561","p1__36531#","vec__36563","p1__36532#","taoensso.sente/new-ChAjaxSocket","k36568","G__36572","ws-chsk-opts","ajax-chsk-opts","impl_","p__36573","vec__36574","G__36567","this36569","other36570","pred__36577","expr__36578","taoensso.sente/ChAutoSocket","G__36571","G__36582","taoensso.sente/->ChAutoSocket","taoensso.sente/map->ChAutoSocket","impl","map__36580","ajax-conn!","cljs.core/remove-watch","ws-conn!","downgraded?_","cljs.core/add-watch","taoensso.sente/new-ChAutoSocket","taoensso.sente/get-chsk-url","protocol","host","path","type","G__36583","G__36585","e36584","G__36586","G__36587","taoensso.encore.path","taoensso.sente/make-channel-socket-client!","p__36591","vec__36592","map__36595","seq36588","G__36589","G__36590","?csrf-token","port","wrap-recv-evs?","taoensso.encore/exp-backoff","_deprecated-more-opts","G__36598","e36597","e36599","vec__36600","ws-url","ajax-url","win-loc","taoensso.encore/get-win-loc","z","e36603","taoensso.truss.impl/WrappedError","e36604","private-chs","buf","cljs.core.map","common-chsk-opts","auto-chsk-opts","?chsk","G__36605","chsk-state_","internal-ch","cljs.core.partial","ev-ch","cljs.core.async.merge","ev-msg-ch","vec__36606","cljs.core.async.pipe","taoensso.sente/-start-chsk-router!","server?","event-msg-handler","map__36609","trace-evs?","error-handler","simple-auto-threading?","ch-ctrl","execute1","state_36658","state_val_36659","inst_36654","statearr-36660","statearr-36661","inst_36624","inst_36619","inst_36621","inst_36620","inst_36622","inst_36623","statearr-36662","statearr-36663","statearr-36664","statearr-36665","inst_36640","statearr-36666","inst_36629","inst_36630","statearr-36667","statearr-36668","inst_36656","statearr-36669","inst_36615","inst_36616","inst_36617","cljs.core.async/ioc-alts!","statearr-36670","statearr-36671","statearr-36672","inst_36645","statearr-36673","inst_36648","inst_36649","inst_36650","vec__36612","map__36627","inst_36651","statearr-36679","statearr-36680","inst_36643","statearr-36681","statearr-36682","inst_36632","inst_36633","inst_36634","inst_36635","inst_36636","statearr-36683","statearr-36684","statearr-36685","e36686","statearr-36687","statearr-36688","statearr-36689","v","p","stop?","event-msg","e36674","G__36676","e36677","e36678","e1","e36675","eh","e2","cljs.core.async/close!","taoensso.sente/start-server-chsk-router!","p__36693","vec__36694","map__36697","seq36690","G__36691","G__36692","taoensso.sente/start-client-chsk-router!","p__36702","vec__36703","map__36706","seq36699","G__36700","G__36701","taoensso.sente/event-msg?","taoensso.sente/make-channel-socket!","taoensso.sente/start-chsk-router!","taoensso.sente/start-chsk-router-loop!","event-handler","G__36708","G__36709","taoensso.sente/set-logging-level!","taoensso.timbre/set-level!","taoensso.sente/ajax-call","taoensso.sente/default-chsk-url-fn","p__36710","map__36711","location","pathname"],"sourcesContent":["(ns taoensso.sente\n  \"Channel sockets for Clojure/Script.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       \u2713              [1]                           \u2713\n    * Ajax:            [2]              \u2713                           [3]\n\n    [1] Emulate with cb-uuid wrapping\n    [2] Emulate with dummy-cb wrapping\n    [3] Emulate with long-polling\n\n  Abbreviations:\n    * chsk      - Channel socket (Sente's own pseudo \\\"socket\\\")\n    * server-ch - Underlying web server's async channel that implement\n                  Sente's server channel interface\n    * sch       - server-ch alias\n    * uid       - User-id. An application-level user identifier used for async\n                  push. May have semantic meaning (e.g. username, email address),\n                  may not (e.g. client/random id) - app's discretion.\n    * cb        - Callback\n    * tout      - Timeout\n    * ws        - WebSocket/s\n    * pstr      - Packed string. Arbitrary Clojure data serialized as a\n                  string (e.g. edn) for client<->server comms\n    * udt       - Unix timestamp (datetime long)\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1], [2]\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error\n\n    * Client-side events:\n        [:chsk/handshake [<?uid> nil[4] <?handshake-data> <first-handshake?>]]\n        [:chsk/state [<old-state-map> <new-state-map>]]\n        [:chsk/recv <ev-as-pushed-from-server>] ; Server>user push\n        [:chsk/ws-ping]\n\n    * Server-side events:\n        [:chsk/bad-package <packed-str>]\n        [:chsk/bad-event   <event>]\n        [:chsk/uidport-open  <uid>]\n        [:chsk/uidport-close <uid>]\n        [:chsk/ws-ping]\n\n  Channel socket state map:\n    :type               - e/o #{:auto :ws :ajax}\n    :open?              - Truthy iff chsk appears to be open (connected) now\n    :ever-opened?       - Truthy iff chsk handshake has ever completed successfully\n    :first-open?        - Truthy iff chsk just completed first successful handshake\n    :uid                - User id provided by server on handshake,    or nil\n    :handshake-data     - Arb user data provided by server on handshake\n    :last-ws-error      - ?{:udt _ :ev <WebSocket-on-error-event>}\n    :last-ws-close      - ?{:udt _ :ev <WebSocket-on-close-event>\n                            :clean? _ :code _ :reason _}\n    :last-close         - ?{:udt _ :reason _}, with reason e/o\n                            #{nil :requested-disconnect :requested-reconnect\n                             :downgrading-ws-to-ajax :unexpected}\n    :udt-next-reconnect - Approximate udt of next scheduled auto-reconnect attempt\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility).\n      In any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability).\n\n  [4] Used to be a csrf-token. Was removed in v1.14 for security reasons.\n  A `nil` remains for semi-backwards-compatibility with pre-v1.14 clients.\"\n\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n\n  #?(:clj\n     (:require\n      [clojure.string :as str]\n      [clojure.core.async :as async :refer (<! <!! >! >!! put! chan go go-loop)]\n      [taoensso.encore :as enc :refer (swap-in! reset-in! swapped have have! have?)]\n      [taoensso.timbre :as timbre :refer (tracef debugf infof warnf errorf)]\n      [taoensso.sente.interfaces :as interfaces]))\n\n  #?(:cljs\n     (:require\n      [clojure.string :as str]\n      [cljs.core.async :as async :refer (<! >! put! chan)]\n      [taoensso.encore :as enc :refer (format swap-in! reset-in! swapped)\n       :refer-macros (have have! have?)]\n      [taoensso.timbre :as timbre :refer-macros (tracef debugf infof warnf errorf)]\n      [taoensso.sente.interfaces :as interfaces]))\n\n  #?(:cljs\n     (:require-macros\n      [cljs.core.async.macros :as asyncm :refer (go go-loop)]\n      [taoensso.sente :as sente-macros :refer (elide-require)]))\n\n  #?(:clj\n     (:import\n      [org.java_websocket.client WebSocketClient])))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 105 0])\n  (enc/assert-min-encore-version  2.105))\n\n(def sente-version \"Useful for identifying client/server mismatch\"\n  [1 11 0])\n\n#?(:cljs (def ^:private node-target? (= *target* \"nodejs\")))\n\n;; (timbre/set-level! :trace) ; Uncomment for debugging\n(defonce debug-mode?_ (atom false))\n\n;;;; Events\n;; Clients & server both send `event`s and receive (i.e. route) `event-msg`s:\n;;   - `event`s have the same form client+server side,\n;;   - `event-msg`s have a similar but not identical form\n\n(defn- expected [expected x] {:expected expected :actual {:type (type x) :value x}})\n(defn validate-event\n  \"Returns nil if given argument is a valid [ev-id ?ev-data] form. Otherwise\n  returns a map of validation errors like `{:wrong-type {:expected _ :actual _}}`.\"\n  [x]\n  (cond\n    (not (vector? x))        {:wrong-type   (expected :vector x)}\n    (not (#{1 2} (count x))) {:wrong-length (expected #{1 2}  x)}\n    :else\n    (let [[ev-id _] x]\n      (cond\n        (not (keyword? ev-id))  {:wrong-id-type   (expected :keyword            ev-id)}\n        (not (namespace ev-id)) {:unnamespaced-id (expected :namespaced-keyword ev-id)}\n        :else nil))))\n\n(defn assert-event\n  \"Returns given argument if it is a valid [ev-id ?ev-data] form. Otherwise\n  throws a validation exception.\"\n  [x]\n  (when-let [errs (validate-event x)]\n    (throw (ex-info \"Invalid event\" {:given x :errors errs}))))\n\n(defn event? \"Valid [ev-id ?ev-data] form?\" [x] (nil? (validate-event x)))\n(defn as-event [x]\n  (if-let [errs (validate-event x)]\n    ;; [:chsk/bad-event {:given x :errors errs}] ; Breaking change\n    [:chsk/bad-event x]\n    x))\n\n(defn client-event-msg? [x]\n  (and\n    (map? x)\n    (enc/ks>= #{:ch-recv :send-fn :state :event :id :?data} x)\n    (let [{:keys [ch-recv send-fn state event]} x]\n      (and\n        (enc/chan? ch-recv)\n        (ifn?      send-fn)\n        (enc/atom? state)\n        (event?    event)))))\n\n(defn server-event-msg? [x]\n  (and\n    (map? x)\n    (enc/ks>= #{:ch-recv :send-fn :connected-uids :send-buffers\n                :ring-req :client-id\n                :event :id :?data :?reply-fn :uid} x)\n    (let [{:keys [ch-recv send-fn connected-uids send-buffers\n                  ring-req client-id event ?reply-fn]} x]\n      (and\n        (enc/chan?       ch-recv)\n        (ifn?            send-fn)\n        (enc/atom?       connected-uids)\n        (enc/atom?       send-buffers)\n        (map?            ring-req)\n        (enc/nblank-str? client-id)\n        (event?          event)\n        (or (nil? ?reply-fn)\n            (ifn? ?reply-fn))))))\n\n(defn- put-server-event-msg>ch-recv!\n  \"All server `event-msg`s go through this\"\n  [ch-recv {:as ev-msg :keys [event ?reply-fn]}]\n  (let [[ev-id ev-?data :as valid-event] (as-event event)\n        ev-msg* (merge ev-msg {:event     valid-event\n                               :?reply-fn ?reply-fn\n                               :id        ev-id\n                               :?data     ev-?data})]\n    (if-not (server-event-msg? ev-msg*)\n      (warnf \"Bad ev-msg: %s\" ev-msg) ; Log 'n drop\n      (put! ch-recv ev-msg*))))\n\n;;; Note that cb replys need _not_ be `event` form!\n#?(:cljs (defn cb-error? [cb-reply-clj] (#{:chsk/closed :chsk/timeout :chsk/error} cb-reply-clj)))\n#?(:cljs (defn cb-success? [cb-reply-clj] (not (cb-error? cb-reply-clj))))\n\n;;;; Packing\n;; * Client<->server payloads are arbitrary Clojure vals (cb replies or events).\n;; * Payloads are packed for client<->server transit.\n;; * Packing includes ->str encoding, and may incl. wrapping to carry cb info.\n\n(defn- unpack \"prefixed-pstr->[clj ?cb-uuid]\"\n  [packer prefixed-pstr]\n  (have? string? prefixed-pstr)\n  (let [wrapped? (enc/str-starts-with? prefixed-pstr \"+\")\n        pstr     (subs prefixed-pstr 1)\n        clj\n        (try\n          (interfaces/unpack packer pstr)\n          (catch #?(:clj Throwable :cljs :default) t\n            (debugf \"Bad package: %s (%s)\" pstr t)\n            [:chsk/bad-package pstr]))\n\n        [clj ?cb-uuid] (if wrapped? clj [clj nil])\n        ?cb-uuid (if (= 0 ?cb-uuid) :ajax-cb ?cb-uuid)]\n\n    (tracef \"Unpacking: %s -> %s\" prefixed-pstr [clj ?cb-uuid])\n    [clj ?cb-uuid]))\n\n(defn- pack \"clj->prefixed-pstr\"\n  ([packer clj]\n   (let [;; \"-\" prefix => Unwrapped (has no callback)\n         pstr (str \"-\" (interfaces/pack packer clj))]\n     (tracef \"Packing (unwrapped): %s -> %s\" clj pstr)\n     pstr))\n\n  ([packer clj ?cb-uuid]\n   (let [;;; Keep wrapping as light as possible:\n         ?cb-uuid    (if (= ?cb-uuid :ajax-cb) 0 ?cb-uuid)\n         wrapped-clj (if ?cb-uuid [clj ?cb-uuid] [clj])\n         ;; \"+\" prefix => Wrapped (has callback)\n         pstr (str \"+\" (interfaces/pack packer wrapped-clj))]\n     (tracef \"Packing (wrapped): %s -> %s\" wrapped-clj pstr)\n     pstr)))\n\n(deftype EdnPacker []\n  interfaces/IPacker\n  (pack   [_ x] (enc/pr-edn   x))\n  (unpack [_ s] (enc/read-edn s)))\n\n(def ^:private default-edn-packer (EdnPacker.))\n\n(defn- coerce-packer [x]\n  (if (= x :edn)\n    default-edn-packer\n    (have #(satisfies? interfaces/IPacker %) x)))\n\n(comment\n  (do\n    (require '[taoensso.sente.packers.transit :as transit])\n    (def ^:private default-transit-json-packer (transit/get-transit-packer)))\n\n  (let [pack   interfaces/pack\n        unpack interfaces/unpack\n        data   {:a :A :b :B :c \"hello world\"}]\n\n    (enc/qb 10000\n      (let [pk default-edn-packer]          (unpack pk (pack pk data)))\n      (let [pk default-transit-json-packer] (unpack pk (pack pk data))))))\n\n;;;; Server API\n\n(def ^:private next-idx! (enc/idx-fn))\n\n(declare\n  ^:private send-buffered-server-evs>ws-clients!\n  ^:private send-buffered-server-evs>ajax-clients!\n  ^:private default-client-side-ajax-timeout-ms)\n\n(defn- bad-origin?\n  [allowed-origins {:as ring-req :keys [headers]}]\n  (if (= allowed-origins :all)\n    false\n    (let [origin  (get headers \"origin\")\n          referer (get headers \"referer\" \"\")]\n      (cond\n        (contains? (set allowed-origins) origin) false\n        (enc/rsome #(str/starts-with? referer (str % \"/\")) allowed-origins) false\n        :else true))))\n\n(comment\n  ;; good (pass)\n  (bad-origin? :all                 {:headers {\"origin\"  \"http://site.com\"}})\n  (bad-origin? #{\"http://site.com\"} {:headers {\"origin\"  \"http://site.com\"}})\n  (bad-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://site.com/\"}})\n\n  ;; bad (fail)\n  (bad-origin? #{\"http://site.com\"} {:headers nil})\n  (bad-origin? #{\"http://site.com\"} {:headers {\"origin\"  \"http://attacker.com\"}})\n  (bad-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://attacker.com/\"}})\n  (bad-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://site.com.attacker.com/\"}}))\n\n(defn make-channel-socket-server!\n  \"Takes a web server adapter[1] and returns a map with keys:\n\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn                     ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; (fn [ring-req])  for Ring CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; (fn [ring-req])  for Ring GET + chsk URL.\n\n    :connected-uids ;             Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n    :send-buffers   ; Implementation detail, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Security options:\n\n    :allowed-origins   ; e.g. #{\\\"http://site.com\\\" ...}, defaults to :all. ; Alpha\n\n    :csrf-token-fn     ; ?(fn [ring-req]) -> CSRF-token for Ajax POSTs and WS handshake.\n                       ; CSRF check will be skipped iff nil (NOT RECOMMENDED!).\n\n    :authorized?-fn    ; ?(fn [ring-req]) -> When non-nil, (authorized?-fn <ring-req>)\n                       ; must return truthy, otherwise connection requests will be\n                       ; rejected with (unauthorized-fn <ring-req>) response.\n                       ;\n                       ; May check Authroization HTTP header, etc.\n\n  Other common options:\n\n    :user-id-fn        ; (fn [ring-req]) -> unique user-id for server>user push.\n    :handshake-data-fn ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :ws-kalive-ms      ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to client's :ws-kalive-ms.\n    :lp-timeout-ms     ; Timeout (repoll) long-polling Ajax conns after given msecs.\n    :send-buf-ms-ajax  ; [2]\n    :send-buf-ms-ws    ; [2]\n    :packer            ; :edn (default), or an IPacker implementation.\n\n  [1] e.g. `(taoensso.sente.server-adapters.http-kit/get-sch-adapter)` or\n           `(taoensso.sente.server-adapters.immutant/get-sch-adapter)`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows).\"\n\n  [web-server-ch-adapter\n   & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms\n              send-buf-ms-ajax send-buf-ms-ws\n              user-id-fn bad-csrf-fn bad-origin-fn csrf-token-fn\n              handshake-data-fn packer allowed-origins\n              authorized?-fn unauthorized-fn]\n\n       :or   {recv-buf-or-n    (async/sliding-buffer 1000)\n              ws-kalive-ms     (enc/ms :secs 25) ; < Heroku 55s timeout\n              lp-timeout-ms    (enc/ms :secs 20) ; < Heroku 30s timeout\n              send-buf-ms-ajax 100\n              send-buf-ms-ws   30\n              user-id-fn      (fn [ ring-req] (get-in ring-req [:session :uid]))\n              bad-csrf-fn     (fn [_ring-req] {:status 403 :body \"Bad CSRF token\"})\n              bad-origin-fn   (fn [_ring-req] {:status 403 :body \"Unauthorized origin\"})\n              unauthorized-fn (fn [_ring-req] {:status 401 :body \"Unauthorized request\"})\n              csrf-token-fn\n              (fn [ring-req]\n                (or (:anti-forgery-token ring-req)\n                  (get-in ring-req [:session :csrf-token])\n                  (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token])\n                  (get-in ring-req [:session \"__anti-forgery-token\"])\n                  #_:sente/no-reference-csrf-token\n                  ))\n\n              handshake-data-fn (fn [ring-req] nil)\n              packer :edn\n              allowed-origins :all}}]]\n\n  (have? enc/pos-int? send-buf-ms-ajax send-buf-ms-ws)\n  (have? #(satisfies? interfaces/IServerChanAdapter %) web-server-ch-adapter)\n\n  (let [max-ms default-client-side-ajax-timeout-ms]\n    (when (>= lp-timeout-ms max-ms)\n      (throw\n        (ex-info (str \":lp-timeout-ms must be < \" max-ms)\n          {:lp-timeout-ms lp-timeout-ms\n           :default-client-side-ajax-timeout-ms max-ms}))))\n\n  (let [allowed-origins (have [:or set? #{:all}] allowed-origins)\n        packer  (coerce-packer packer)\n        ch-recv (chan recv-buf-or-n)\n\n        user-id-fn\n        (fn [ring-req client-id]\n          ;; Allow uid to depend (in part or whole) on client-id. Be cautious\n          ;; of security implications.\n          (or (user-id-fn (assoc ring-req :client-id client-id)) ::nil-uid))\n\n        ;; :ws udts used for ws-kalive (to check for activity in window period)\n        ;; :ajax udts used for lp-timeout (as a way to check active conn identity)\n        conns_          (atom {:ws  {} :ajax  {}}) ; {<uid> {<client-id> [<?sch> <udt>]}}\n        send-buffers_   (atom {:ws  {} :ajax  {}}) ; {<uid> [<buffered-evs> <#{ev-uuids}>]}\n        connected-uids_ (atom {:ws #{} :ajax #{} :any #{}}) ; Public\n\n        upd-conn!\n        (fn\n          ([conn-type uid client-id] ; Update udt\n           (swap-in! conns_ [conn-type uid client-id]\n             (fn [?v]\n               (let [[?sch _udt] ?v\n                     new-udt (enc/now-udt)]\n                 (enc/swapped\n                   [?sch new-udt]\n                   {:init? (nil? ?v) :udt new-udt :?sch ?sch})))))\n\n          ([conn-type uid client-id new-?sch] ; Update sch + udt\n           (swap-in! conns_ [conn-type uid client-id]\n             (fn [?v]\n               (let [new-udt (enc/now-udt)]\n                 (enc/swapped\n                   [new-?sch new-udt]\n                   {:init? (nil? ?v) :udt new-udt :?sch new-?sch}))))))\n\n        connect-uid!\n        (fn [conn-type uid] {:pre [(have? uid)]}\n          (let [newly-connected?\n                (swap-in! connected-uids_ []\n                  (fn [{:keys [ws ajax any] :as old-m}]\n                    (let [new-m\n                          (case conn-type\n                            :ws   {:ws (conj ws uid) :ajax ajax            :any (conj any uid)}\n                            :ajax {:ws ws            :ajax (conj ajax uid) :any (conj any uid)})]\n                      (swapped new-m\n                        (let [old-any (:any old-m)\n                              new-any (:any new-m)]\n                          (when (and (not (contains? old-any uid))\n                                          (contains? new-any uid))\n                            :newly-connected))))))]\n            newly-connected?))\n\n        upd-connected-uid!\n        (fn [uid] {:pre [(have? uid)]}\n          (let [newly-disconnected?\n                (swap-in! connected-uids_ []\n                  (fn [{:keys [ws ajax any] :as old-m}]\n                    (let [conns' @conns_\n                          any-ws-clients?   (contains? (:ws   conns') uid)\n                          any-ajax-clients? (contains? (:ajax conns') uid)\n                          any-clients?      (or any-ws-clients?\n                                                any-ajax-clients?)\n                          new-m\n                          {:ws   (if any-ws-clients?   (conj ws   uid) (disj ws   uid))\n                           :ajax (if any-ajax-clients? (conj ajax uid) (disj ajax uid))\n                           :any  (if any-clients?      (conj any  uid) (disj any  uid))}]\n\n                      (swapped new-m\n                        (let [old-any (:any old-m)\n                              new-any (:any new-m)]\n                          (when (and     (contains? old-any uid)\n                                    (not (contains? new-any uid)))\n                            :newly-disconnected))))))]\n\n            newly-disconnected?))\n\n        send-fn ; server>user (by uid) push\n        (fn [user-id ev & [{:as opts :keys [flush?]}]]\n          (let [uid (if (= user-id :sente/all-users-without-uid) ::nil-uid user-id)\n                _   (tracef \"Chsk send: (->uid %s) %s\" uid ev)\n                _   (assert uid\n                      (str \"Support for sending to `nil` user-ids has been REMOVED. \"\n                           \"Please send to `:sente/all-users-without-uid` instead.\"))\n                _   (assert-event ev)\n\n                ev-uuid (enc/uuid-str)\n\n                flush-buffer!\n                (fn [conn-type]\n                  (when-let\n                      [pulled\n                       (swap-in! send-buffers_ [conn-type]\n                         (fn [m]\n                           ;; Don't actually flush unless the event buffered\n                           ;; with _this_ send call is still buffered (awaiting\n                           ;; flush). This means that we'll have many (go\n                           ;; block) buffer flush calls that'll noop. They're\n                           ;; cheap, and this approach is preferable to\n                           ;; alternatives like flush workers.\n                           (let [[_ ev-uuids] (get m uid)]\n                             (if (contains? ev-uuids ev-uuid)\n                               (swapped\n                                 (dissoc m uid)\n                                 (get    m uid))\n                               (swapped m nil)))))]\n\n                    (let [[buffered-evs ev-uuids] pulled]\n                      (have? vector? buffered-evs)\n                      (have? set?    ev-uuids)\n\n                      (let [buffered-evs-ppstr (pack packer buffered-evs)]\n                        (tracef \"buffered-evs-ppstr: %s\" buffered-evs-ppstr)\n                        (case conn-type\n                          :ws   (send-buffered-server-evs>ws-clients! conns_\n                                  uid buffered-evs-ppstr upd-conn!)\n                          :ajax (send-buffered-server-evs>ajax-clients! conns_\n                                  uid buffered-evs-ppstr))))))]\n\n            (if (= ev [:chsk/close]) ; Currently undocumented\n              (do\n                (debugf \"Chsk closing (client may reconnect): %s\" uid)\n                (when flush?\n                  (flush-buffer! :ws)\n                  (flush-buffer! :ajax))\n\n                (doseq [[?sch _udt] (vals (get-in @conns_ [:ws uid]))]\n                  (when-let [sch ?sch] (interfaces/sch-close! sch)))\n\n                (doseq [[?sch _udt] (vals (get-in @conns_ [:ajax uid]))]\n                  (when-let [sch ?sch] (interfaces/sch-close! sch))))\n\n              (do\n                ;; Buffer event\n                (doseq [conn-type [:ws :ajax]]\n                  (swap-in! send-buffers_ [conn-type uid]\n                    (fn [?v]\n                      (if-not ?v\n                        [[ev] #{ev-uuid}]\n                        (let [[buffered-evs ev-uuids] ?v]\n                          [(conj buffered-evs ev)\n                           (conj ev-uuids     ev-uuid)])))))\n\n                ;;; Flush event buffers after relevant timeouts:\n                ;; * May actually flush earlier due to another timeout.\n                ;; * We send to _all_ of a uid's connections.\n                ;; * Broadcasting is possible but I'd suggest doing it rarely,\n                ;;   and only to users we know/expect are actually online.\n                ;;\n                (if flush?\n                  (do\n                    (flush-buffer! :ws)\n                    (flush-buffer! :ajax))\n                  (let [ws-timeout   (async/timeout send-buf-ms-ws)\n                        ajax-timeout (async/timeout send-buf-ms-ajax)]\n                    (go\n                      (<! ws-timeout)\n                      (flush-buffer! :ws))\n                    (go\n                      (<! ajax-timeout)\n                      (flush-buffer! :ajax)))))))\n\n          ;; Server-side send is async so nothing useful to return (currently\n          ;; undefined):\n          nil)\n\n        bad-csrf?\n        (fn [ring-req]\n          (if (nil? csrf-token-fn) ; Provides a way to disable CSRF check\n            false\n            (if-let [reference-csrf-token (csrf-token-fn ring-req)]\n              (let [csrf-token-from-client\n                    (or\n                      (get-in ring-req [:params    :csrf-token])\n                      (get-in ring-req [:headers \"x-csrf-token\"])\n                      (get-in ring-req [:headers \"x-xsrf-token\"]))]\n\n                (not\n                  (enc/const-str=\n                    reference-csrf-token\n                    csrf-token-from-client)))\n\n              true ; By default fail if no CSRF token\n              )))\n\n        unauthorized?\n        (fn [ring-req]\n          (if (nil? authorized?-fn)\n            false\n            (not (authorized?-fn))))\n\n        ;; nnil if connection attempt should be rejected\n        possible-rejection-resp\n        (fn [ring-req]\n          (cond\n            (bad-csrf?   ring-req)\n            (bad-csrf-fn ring-req)\n\n            (bad-origin? allowed-origins ring-req)\n            (bad-origin-fn               ring-req)\n\n            (unauthorized?   ring-req)\n            (unauthorized-fn ring-req)\n\n            :else nil))\n\n        ev-msg-const\n        {:ch-recv        ch-recv\n         :send-fn        send-fn\n         :connected-uids connected-uids_\n         :send-buffers   send-buffers_}]\n\n    {:ch-recv        ch-recv\n     :send-fn        send-fn\n     :connected-uids connected-uids_\n     :send-buffers   send-buffers_\n\n     ;; Does not participate in `conns_` (has specific req->resp)\n     :ajax-post-fn\n     (fn [ring-req]\n       (enc/cond\n         :if-let [resp (possible-rejection-resp ring-req)] resp\n         :else\n         (interfaces/ring-req->server-ch-resp web-server-ch-adapter ring-req\n           {:on-open\n            (fn [server-ch websocket?]\n              (assert (not websocket?))\n              (let [params        (get ring-req :params)\n                    ppstr         (get params   :ppstr)\n                    client-id     (get params   :client-id)\n                    [clj has-cb?] (unpack packer ppstr)\n                    reply-fn\n                    (let [replied?_ (atom false)]\n                      (fn [resp-clj] ; Any clj form\n                        (when (compare-and-set! replied?_ false true)\n                          (tracef \"Chsk send (ajax post reply): %s\" resp-clj)\n                          (interfaces/sch-send! server-ch websocket?\n                            (pack packer resp-clj)))))]\n\n                (put-server-event-msg>ch-recv! ch-recv\n                  (merge ev-msg-const\n                    {;; Note that the client-id is provided here just for the\n                     ;; user's convenience. non-lp-POSTs don't actually need a\n                     ;; client-id for Sente's own implementation:\n                     :client-id client-id #_\"unnecessary-for-non-lp-POSTs\"\n                     :ring-req  ring-req\n                     :event     clj\n                     :uid       (user-id-fn ring-req client-id)\n                     :?reply-fn (when has-cb? reply-fn)}))\n\n                (if has-cb?\n                  (when-let [ms lp-timeout-ms]\n                    (go\n                      (<! (async/timeout ms))\n                      (reply-fn :chsk/timeout)))\n                  (reply-fn :chsk/dummy-cb-200))))})))\n\n     ;; Ajax handshake/poll, or WebSocket handshake\n     :ajax-get-or-ws-handshake-fn\n     (fn [ring-req]\n       (let [sch-uuid   (enc/uuid-str 6)\n             params     (get ring-req :params)\n             client-id  (get params   :client-id)\n             uid        (user-id-fn    ring-req client-id)\n\n             receive-event-msg! ; Partial\n             (fn self\n               ([event          ] (self event nil))\n               ([event ?reply-fn]\n                (put-server-event-msg>ch-recv! ch-recv\n                  (merge ev-msg-const\n                    {:client-id client-id\n                     :ring-req  ring-req\n                     :event     event\n                     :?reply-fn ?reply-fn\n                     :uid       uid}))))\n\n             send-handshake!\n             (fn [server-ch websocket?]\n               (tracef \"send-handshake!\")\n               (let [?handshake-data (handshake-data-fn ring-req)\n                     handshake-ev\n                     (if (nil? ?handshake-data) ; Micro optimization\n                       [:chsk/handshake [uid nil]]\n                       [:chsk/handshake [uid nil ?handshake-data]])]\n                 (interfaces/sch-send! server-ch websocket?\n                   (pack packer handshake-ev))))]\n\n         (enc/cond\n\n           (str/blank? client-id)\n           (let [err-msg \"Client's Ring request doesn't have a client id. Does your server have the necessary keyword Ring middleware (`wrap-params` & `wrap-keyword-params`)?\"]\n             (errorf (str err-msg \": %s\") ring-req) ; Careful re: % in req\n             (throw (ex-info err-msg {:ring-req ring-req})))\n\n           :if-let [resp (possible-rejection-resp ring-req)] resp\n           :else\n           (interfaces/ring-req->server-ch-resp web-server-ch-adapter ring-req\n             {:on-open\n              (fn [server-ch websocket?]\n                (if websocket?\n\n                  ;; WebSocket handshake\n                  (let [_ (tracef \"New WebSocket channel: %s (%s)\" uid sch-uuid)\n                        updated-conn (upd-conn! :ws uid client-id server-ch)\n                        udt-open     (:udt updated-conn)]\n\n                    (when (connect-uid! :ws uid)\n                      (receive-event-msg! [:chsk/uidport-open uid]))\n\n                    (send-handshake! server-ch websocket?)\n\n                    ;; Start ws-kalive loop\n                    ;; This also works to gc ws conns that were suddenly\n                    ;; terminated (e.g. by turning on airplane mode)\n                    (when-let [ms ws-kalive-ms]\n                      (go-loop [udt-t0 udt-open]\n                        (<! (async/timeout ms))\n                        (when-let [[_sch udt-t1] (get-in @conns_ [:ws uid client-id])]\n                          (when (interfaces/sch-open? server-ch)\n                            ;; (assert (= _sch server-ch))\n                            (when (= udt-t1 udt-t0)\n                              ;; Ref. issue #230:\n                              ;; We've seen no send/recv activity on this\n                              ;; conn w/in our kalive window so send a ping\n                              ;; ->client (should auto-close conn if it's\n                              ;; gone dead).\n                              (interfaces/sch-send! server-ch websocket?\n                                (pack packer :chsk/ws-ping)))\n                            (recur udt-t1))))))\n\n                  ;; Ajax handshake/poll\n                  (let [_ (tracef \"New Ajax handshake/poll: %s (%s)\" uid sch-uuid)\n                        updated-conn (upd-conn! :ajax uid client-id server-ch)\n                        udt-open     (:udt updated-conn)\n                        handshake?   (or (:init? updated-conn) (:handshake? params))]\n\n                    (when (connect-uid! :ajax uid)\n                      (receive-event-msg! [:chsk/uidport-open uid]))\n\n                    (if handshake?\n                      ;; Client will immediately repoll\n                      (send-handshake! server-ch websocket?)\n\n                      (when-let [ms lp-timeout-ms]\n                        (go\n                          (<! (async/timeout ms))\n                          (when-let [[_sch udt-t1] (get-in @conns_ [:ajax uid client-id])]\n                            (when (= udt-t1 udt-open)\n                              ;; (assert (= _sch server-ch))\n                              ;; Appears to still be the active sch\n                              (interfaces/sch-send! server-ch websocket?\n                                (pack packer :chsk/timeout))))))))))\n\n              :on-msg\n              (fn [server-ch websocket? req-ppstr]\n                (assert websocket?)\n                (upd-conn! :ws uid client-id)\n                (let [[clj ?cb-uuid] (unpack packer req-ppstr)]\n                  (receive-event-msg! clj ; Should be ev\n                    (when ?cb-uuid\n                      (fn reply-fn [resp-clj] ; Any clj form\n                        (tracef \"Chsk send (ws reply): %s\" resp-clj)\n                        ;; true iff apparent success:\n                        (interfaces/sch-send! server-ch websocket?\n                          (pack packer resp-clj ?cb-uuid)))))))\n\n              :on-close ; We rely on `on-close` to trigger for _every_ conn!\n              (fn [server-ch websocket? _status]\n                ;; Note that `status` type varies with underlying web server\n                (let [conn-type (if websocket? :ws :ajax)\n                      _ (tracef \"%s channel closed: %s (%s)\"\n                          (if websocket? \"WebSocket\" \"Ajax\")\n                          uid sch-uuid)\n\n                      updated-conn (upd-conn! conn-type uid client-id nil)\n                      udt-close    (:udt updated-conn)]\n\n                  ;; Allow some time for possible reconnects (repoll,\n                  ;; sole window refresh, etc.):\n                  (go\n                    (<! (async/timeout 5000))\n                    (let [[_?sch udt-t1] (get-in @conns_ [conn-type uid client-id])]\n\n                      (when @debug-mode?_\n                        (debugf \"close-timeout: %s %s %s %s\" conn-type uid\n                          sch-uuid [(= udt-t1 udt-close) udt-t1 udt-close]))\n\n                      (when (= udt-t1 udt-close)\n                        (let [disconnect? ; Removed entry for client-id?\n                              (swap-in! conns_ [conn-type uid client-id]\n                                (fn [[_sch udt-t1]]\n                                  (if (= udt-t1 udt-close)\n                                    (swapped :swap/dissoc true)\n                                    (swapped [_sch udt-t1] false))))]\n\n                          (when disconnect?\n\n                            ;; Potentially remove entry for uid\n                            (swap-in! conns_ [conn-type uid]\n                              (fn [?m] (if (empty? ?m) :swap/dissoc ?m)))\n\n                            (when (upd-connected-uid! uid)\n                              (receive-event-msg! [:chsk/uidport-close uid])))))))))\n\n              :on-error\n              (fn [server-ch websocket? error]\n                (errorf \"ring-req->server-ch-resp error: %s (%s)\"\n                  error uid sch-uuid))}))))}))\n\n(defn- send-buffered-server-evs>ws-clients!\n  \"Actually pushes buffered events (as packed-str) to all uid's WebSocket conns.\"\n  [conns_ uid buffered-evs-pstr upd-conn!]\n  (tracef \"send-buffered-server-evs>ws-clients!: %s\" buffered-evs-pstr)\n  (doseq [[client-id [?sch _udt]] (get-in @conns_ [:ws uid])]\n    (when-let [sch ?sch]\n      (upd-conn! :ws uid client-id)\n      (interfaces/sch-send! sch :websocket buffered-evs-pstr))))\n\n(defn- send-buffered-server-evs>ajax-clients!\n  \"Actually pushes buffered events (as packed-str) to all uid's Ajax conns.\n  Allows some time for possible Ajax poller reconnects.\"\n  [conns_ uid buffered-evs-pstr]\n  (tracef \"send-buffered-server-evs>ajax-clients!: %s\" buffered-evs-pstr)\n  (let [ms-backoffs [90 180 360 720 1440] ; Mean 2790s\n        ;; All connected/possibly-reconnecting client uuids:\n        client-ids-unsatisfied (keys (get-in @conns_ [:ajax uid]))]\n\n    (when-not (empty? client-ids-unsatisfied)\n      ;; (tracef \"client-ids-unsatisfied: %s\" client-ids-unsatisfied)\n      (go-loop [n 0 client-ids-satisfied #{}]\n        (let [?pulled ; nil or {<client-id> [<?sch> <udt>]}\n              (swap-in! conns_ [:ajax uid]\n                (fn [m] ; {<client-id> [<?sch> <udt>]}\n                  (let [ks-to-pull (remove client-ids-satisfied (keys m))]\n                    ;; (tracef \"ks-to-pull: %s\" ks-to-pull)\n                    (if (empty? ks-to-pull)\n                      (swapped m nil)\n                      (swapped\n                        (reduce\n                          (fn [m k]\n                            (let [[?sch udt] (get m k)]\n                              ;; Nb don't change udt; for Ajax conns_ we only\n                              ;; want udt updated on poll or close, not on\n                              ;; activity (as with ws conns_)\n                              (assoc m k [nil udt #_(enc/now-udt)])))\n\n                          m ks-to-pull)\n                        (select-keys m ks-to-pull))))))]\n\n          (have? [:or nil? map?] ?pulled)\n\n          (let [?newly-satisfied\n                (when ?pulled\n                  (reduce-kv\n                    (fn [s client-id [?sch _udt]]\n                      (let [sent?\n                            (when-let [sch ?sch]\n                              ;; Will noop + return false if sch already closed:\n                              (interfaces/sch-send! ?sch (not :websocket)\n                                buffered-evs-pstr))]\n\n                        (if sent? (conj s client-id) s)))\n                    #{} ?pulled))\n\n                now-satisfied (into client-ids-satisfied ?newly-satisfied)]\n\n            ;; (tracef \"now-satisfied: %s\" now-satisfied)\n            (when-let [ms-backoff (get ms-backoffs n)]\n              (when (enc/rsome (complement now-satisfied) client-ids-unsatisfied)\n                (let [ms-timeout (+ ms-backoff (rand-int ms-backoff))]\n                  ;; Allow some time for possible poller reconnects:\n                  (<! (async/timeout ms-timeout))\n                  (recur (inc n) now-satisfied))))))))))\n\n;;;; Client API\n\n#?(:cljs (def ajax-lite \"Alias of `taoensso.encore/ajax-lite`\" enc/ajax-lite))\n\n   (defprotocol IChSocket\n     (-chsk-connect!    [chsk])\n     (-chsk-disconnect! [chsk reason])\n     (-chsk-reconnect!  [chsk])\n     (-chsk-send!       [chsk ev opts]))\n\n     (defn chsk-connect!    [chsk] (-chsk-connect!    chsk))\n     (defn chsk-disconnect! [chsk] (-chsk-disconnect! chsk :requested-disconnect))\n     (defn chsk-reconnect! \"Useful for reauthenticating after login/logout, etc.\"\n       [chsk] (-chsk-reconnect! chsk))\n     (def chsk-destroy! \"Deprecated\" chsk-disconnect!)\n\n   (defn chsk-send!\n     \"Sends `[ev-id ev-?data :as event]`, returns true on apparent success.\"\n     ([chsk ev] (chsk-send! chsk ev {}))\n     ([chsk ev ?timeout-ms ?cb] (chsk-send! chsk ev {:timeout-ms ?timeout-ms\n                                                     :cb         ?cb}))\n     ([chsk ev opts]\n      (tracef \"Chsk send: (%s) %s\" (assoc opts :cb (boolean (:cb opts))) ev)\n      (-chsk-send! chsk ev opts)))\n\n   (defn- chsk-send->closed! [?cb-fn]\n     (warnf \"Chsk send against closed chsk.\")\n     (when ?cb-fn (?cb-fn :chsk/closed))\n     false)\n\n   (defn- assert-send-args [x ?timeout-ms ?cb]\n     (assert-event x)\n     (assert (or (and (nil? ?timeout-ms) (nil? ?cb))\n                 (and (enc/nat-int? ?timeout-ms)))\n       (str \"cb requires a timeout; timeout-ms should be a +ive integer: \" ?timeout-ms))\n     (assert (or (nil? ?cb) (ifn? ?cb) (enc/chan? ?cb))\n       (str \"cb should be nil, an ifn, or a channel: \" (type ?cb))))\n\n   (defn- pull-unused-cb-fn! [cbs-waiting_ ?cb-uuid]\n     (when-let [cb-uuid ?cb-uuid]\n       (swap-in! cbs-waiting_ [cb-uuid]\n         (fn [?f] (swapped :swap/dissoc ?f)))))\n\n   (defn- swap-chsk-state!\n     \"Atomically swaps the value of chk's :state_ atom.\"\n     [chsk f]\n     (let [[old-state new-state]\n           (swap-in! (:state_ chsk)\n             (fn [old-state]\n               (let [new-state (f old-state)\n                     new-state\n                     (if (:first-open? old-state)\n                       (assoc new-state :first-open? false)\n                       new-state)\n\n                     new-state\n                     (if (:open? new-state)\n                       (dissoc new-state :udt-next-reconnect)\n                       new-state)]\n\n                 (swapped new-state [old-state new-state]))))]\n\n       (when (not= old-state new-state)\n         (let [output [old-state new-state]]\n           ;; (debugf \"Chsk state change: %s\" output)\n           (put! (get-in chsk [:chs :state]) [:chsk/state output])\n           output))))\n\n   (defn- chsk-state->closed [state reason]\n     (have? map? state)\n     (have? [:el #{:requested-disconnect\n                   :requested-reconnect\n                   :downgrading-ws-to-ajax\n                   :unexpected}] reason)\n     (if (or (:open? state) (not= reason :unexpected))\n       (-> state\n         (dissoc :udt-next-reconnect)\n         (assoc\n           :open? false\n           :last-close {:udt (enc/now-udt) :reason reason}))\n       state))\n\n   (defn- cb-chan-as-fn\n     \"Experimental, undocumented. Allows a core.async channel to be provided\n     instead of a cb-fn. The channel will receive values of form\n     [<event-id>.cb <reply>].\"\n     [?cb ev]\n     (if (or (nil? ?cb) (ifn? ?cb))\n       ?cb\n       (do\n         (have? enc/chan? ?cb)\n         (assert-event ev)\n         (let [[ev-id _] ev\n               cb-ch ?cb]\n           (fn [reply]\n             (put! cb-ch\n               [(keyword (str (enc/as-qname ev-id) \".cb\"))\n                reply]))))))\n\n   (defn- receive-buffered-evs! [chs clj]\n     (tracef \"receive-buffered-evs!: %s\" clj)\n     (let [buffered-evs (have vector? clj)]\n       (doseq [ev buffered-evs]\n         (assert-event ev)\n         ;; Should never receive :chsk/* events from server here:\n         (let [[id] ev] (assert (not= (namespace id) \"chsk\")))\n         (put! (:<server chs) ev))))\n\n   (defn- handshake? [x]\n     (and (vector? x) ; Nb support arb input (e.g. cb replies)\n       (let [[x1] x] (= x1 :chsk/handshake))))\n\n   (defn- receive-handshake! [chsk-type chsk clj]\n     (have? [:el #{:ws :ajax}] chsk-type)\n     (have? handshake? clj)\n     (tracef \"receive-handshake! (%s): %s\" chsk-type clj)\n     (let [[_ [?uid _ ?handshake-data]] clj\n           {:keys [chs ever-opened?_]} chsk\n           first-handshake? (compare-and-set! ever-opened?_ false true)\n           new-state\n           {:type           chsk-type ; :auto -> e/o #{:ws :ajax}, etc.\n            :open?          true\n            :ever-opened?   true\n            :uid            ?uid\n            :handshake-data ?handshake-data\n            :first-open?    first-handshake?}\n\n           handshake-ev\n           [:chsk/handshake\n            [?uid nil ?handshake-data first-handshake?]]]\n\n       (assert-event handshake-ev)\n       (swap-chsk-state! chsk #(merge % new-state))\n       (put! (:internal chs) handshake-ev)\n\n       :handled))\n\n#?(:clj\n   (defmacro ^:private elide-require\n     \"Experimental. The presence of `js/require` calls can cause issues with\n    React Native, even if they never execute. Currently no other known\n    workarounds. Ref. https://github.com/ptaoussanis/sente/issues/247.\"\n     [& body]\n     (when-not (enc/get-sys-val \"SENTE_ELIDE_JS_REQUIRE\")\n       `(do ~@body))))\n\n#?(:cljs\n   (def ^:private ?node-npm-websocket_\n     \"nnil iff the websocket npm library[1] is available.\n     Easiest way to install:\n       1. Add the lein-npm[2] plugin to your `project.clj`,\n       2. Add: `:npm {:dependencies [[websocket \\\"1.0.23\\\"]]}`\n\n     [1] Ref. https://www.npmjs.com/package/websocket\n     [2] Ref. https://github.com/RyanMcG/lein-npm\"\n\n     ;; This `let` silliness intended to work around React Native's\n     ;; static analysis tool, to prevent it from detecting a\n     ;; missing package.\n     ;;\n     ;; Ref. https://github.com/ptaoussanis/sente/issues/247#issuecomment-555219121\n     ;;\n     (let [make-package-name (fn [prefix] (str prefix \"socket\"))\n           require-fn\n           (if (exists? js/require)\n             js/require\n             (constantly :no-op))]\n\n       (delay ; Eager eval causes issues with React Native, Ref. #247,\n         (elide-require ; TODO is this now safe to remove?\n           (when (and node-target? (exists? js/require))\n             (try\n               (require-fn (make-package-name \"web\"))\n               ;; In particular, catch 'UnableToResolveError'\n               (catch :default e\n                 ;; (errorf e \"Unable to load npm websocket lib\")\n                 nil))))))))\n\n#?(:clj\n   (defn- create-java-client-websocket!\n     [{:as opts :keys [onerror-fn onmessage-fn onclose-fn uri-str headers]}]\n     (let [uri (java.net.URI. uri-str)\n\n           ;; headers\n           ;; (ImmutableMap/of\n           ;;   \"Origin\"  \"http://localhost:3200\"\n           ;;   \"Referer\" \"http://localhost:3200\"\n           ;;   \"Sec-WebSocket-Extensions\" \"permessage-deflate; client_max_window_bits\"\n           ;;   )\n\n           ws-client\n           (proxy [WebSocketClient] [^java.net.URI uri ^java.util.Map headers]\n             (onOpen    [^org.java_websocket.handshake.ServerHandshake handshakedata] nil)\n             (onError   [ex]                 (onerror-fn   ex))\n             (onMessage [^String message]    (onmessage-fn message))\n             (onClose   [code reason remote] (onclose-fn   code reason remote)))]\n\n       ;; JS client attempts to connect right away at construction time.\n       ;; Java client doesn't need to, but we'll do anyway for consistency.\n       (.connect ws-client)\n       (do       ws-client))))\n\n#?(:cljs\n   (defn- create-js-client-websocket!\n     [{:as opts :keys [onerror-fn onmessage-fn onclose-fn uri-str headers]}]\n     (when-let [WebSocket\n                (or\n                  (enc/oget goog/global           \"WebSocket\")\n                  (enc/oget goog/global           \"MozWebSocket\")\n                  (enc/oget @?node-npm-websocket_ \"w3cwebsocket\"))]\n\n       (let [socket (WebSocket. uri-str)]\n         (doto socket\n           (aset \"onerror\"   onerror-fn)\n           (aset \"onmessage\" onmessage-fn) ; Nb receives both push & cb evs!\n           ;; Fires repeatedly (on each connection attempt) while server is down:\n           (aset \"onclose\"   onclose-fn))\n         socket))))\n\n(defn- create-websocket! [{:as opts :keys [onerror-fn onmessage-fn onclose-fn uri-str headers]}]\n  #?(:cljs (create-js-client-websocket!   opts)\n     :clj  (create-java-client-websocket! opts)))\n\n(defrecord ChWebSocket\n    ;; WebSocket-only IChSocket implementation\n    ;; Handles (re)connections, cbs, etc.\n\n    [client-id chs params headers packer url ws-kalive-ms\n     state_ ; {:type _ :open? _ :uid _ :csrf-token _ ...}\n     instance-handle_ retry-count_ ever-opened?_\n     backoff-ms-fn ; (fn [nattempt]) -> msecs\n     cbs-waiting_ ; {<cb-uuid> <fn> ...}\n     socket_\n     udt-last-comms_]\n\n  IChSocket\n  (-chsk-disconnect! [chsk reason]\n    (reset! instance-handle_ nil) ; Disable auto retry\n    (swap-chsk-state! chsk #(chsk-state->closed % reason))\n    (when-let [s @socket_]\n      #?(:clj  (.closeBlocking ^WebSocketClient s)\n         :cljs (.close s 1000 \"CLOSE_NORMAL\"))))\n\n  (-chsk-reconnect! [chsk]\n    (-chsk-disconnect! chsk :requested-reconnect)\n    (-chsk-connect!    chsk))\n\n  (-chsk-send! [chsk ev opts]\n    (let [{?timeout-ms :timeout-ms ?cb :cb :keys [flush?]} opts\n          _ (assert-send-args ev ?timeout-ms ?cb)\n          ?cb-fn (cb-chan-as-fn ?cb ev)]\n      (if-not (:open? @state_) ; Definitely closed\n        (chsk-send->closed! ?cb-fn)\n\n        ;; TODO Buffer before sending (but honor `:flush?`)\n        (let [?cb-uuid (when ?cb-fn (enc/uuid-str 6))\n              ppstr (pack packer ev ?cb-uuid)]\n\n          (when-let [cb-uuid ?cb-uuid]\n            (reset-in! cbs-waiting_ [cb-uuid] (have ?cb-fn))\n            (when-let [timeout-ms ?timeout-ms]\n              (go\n                (<! (async/timeout timeout-ms))\n                (when-let [cb-fn* (pull-unused-cb-fn! cbs-waiting_ ?cb-uuid)]\n                  (cb-fn* :chsk/timeout)))))\n\n          (try\n            #?(:cljs (.send                  @socket_         ppstr)\n               :clj  (.send ^WebSocketClient @socket_ ^String ppstr))\n\n            (reset! udt-last-comms_ (enc/now-udt))\n            :apparent-success\n            (catch #?(:clj Throwable :cljs :default) t\n              (errorf t \"Chsk send error\")\n              (when-let [cb-uuid ?cb-uuid]\n                (let [cb-fn* (or (pull-unused-cb-fn! cbs-waiting_ cb-uuid)\n                                 (have ?cb-fn))]\n                  (cb-fn* :chsk/error)))\n              false))))))\n\n  (-chsk-connect! [chsk]\n    (let [instance-handle (reset! instance-handle_ (enc/uuid-str))\n          have-handle? (fn [] (= @instance-handle_ instance-handle))\n          connect-fn\n          (fn connect-fn []\n            (when (have-handle?)\n              (let [retry-fn\n                    (fn [] ; Backoff then recur\n                      (when (have-handle?)\n                        (let [retry-count* (swap! retry-count_ inc)\n                              backoff-ms (backoff-ms-fn retry-count*)\n                              udt-next-reconnect (+ (enc/now-udt) backoff-ms)]\n                          (warnf \"Chsk is closed: will try reconnect attempt (%s) in %s ms\"\n                            retry-count* backoff-ms)\n                          #?(:cljs (.setTimeout goog/global connect-fn backoff-ms)\n                             :clj  (go\n                                     (<! (async/timeout backoff-ms))\n                                     (connect-fn)))\n\n                          (swap-chsk-state! chsk\n                            #(assoc % :udt-next-reconnect udt-next-reconnect)))))\n\n                    onerror-fn\n                    #?(:cljs\n                       (fn [ws-ev]\n                         (errorf ; ^:meta {:raw-console? true}\n                           \"WebSocket error: %s\"\n                           (try\n                             (js->clj          ws-ev)\n                             (catch :default _ ws-ev)))\n\n                         (swap-chsk-state! chsk\n                           #(assoc % :last-ws-error\n                              {:udt (enc/now-udt), :ev ws-ev})))\n\n                       :clj\n                       (fn [ex]\n                         (errorf ex \"WebSocket error\")\n                         (swap-chsk-state! chsk\n                           #(assoc % :last-ws-error\n                              {:udt (enc/now-udt), :ex ex}))))\n\n                    onmessage-fn ; Nb receives both push & cb evs!\n                    (fn #?(:cljs [ws-ev] :clj [ppstr])\n                      (let [ppstr #?(:clj            ppstr\n                                     :cljs (enc/oget ws-ev \"data\"))\n\n                            ;; `clj` may/not satisfy `event?` since\n                            ;; we also receive cb replies here. This\n                            ;; is why we prefix pstrs to indicate\n                            ;; whether they're wrapped or not\n                            [clj ?cb-uuid] (unpack packer ppstr)]\n\n                        (reset! udt-last-comms_ (enc/now-udt))\n\n                        (or\n                          (when (handshake? clj)\n                            (receive-handshake! :ws chsk clj)\n                            (reset! retry-count_ 0)\n                            :handshake)\n\n                          (when (= clj :chsk/ws-ping)\n                            (put! (:<server chs) [:chsk/ws-ping])\n                            :noop)\n\n                          (if-let [cb-uuid ?cb-uuid]\n                            (if-let [cb-fn (pull-unused-cb-fn! cbs-waiting_\n                                             cb-uuid)]\n                              (cb-fn clj)\n                              (warnf \"Cb reply w/o local cb-fn: %s\" clj))\n                            (let [buffered-evs clj]\n                              (receive-buffered-evs! chs buffered-evs))))))\n\n                    ;; Fires repeatedly (on each connection attempt) while\n                    ;; server is down:\n                    onclose-fn\n                    (fn #?(:cljs [ws-ev] :clj [code reason remote])\n                      (let [last-ws-close\n                            #?(:clj\n                               {:udt    (enc/now-udt)\n                                :clean? (= code org.java_websocket.framing.CloseFrame/NORMAL)\n                                :code   code\n                                :reason reason}\n\n                               :cljs\n                               {:udt    (enc/now-udt)\n                                :ev     ws-ev\n                                :clean? (enc/oget ws-ev \"wasClean\")\n                                :code   (enc/oget ws-ev \"code\")\n                                :reason (enc/oget ws-ev \"reason\")})]\n\n                        ;; Firefox calls \"onclose\" while unloading,\n                        ;; Ref. http://goo.gl/G5BYbn:\n                        (if (:clean? last-ws-close)\n                          (do\n                            (debugf \"Clean WebSocket close, will not attempt reconnect\")\n                            (swap-chsk-state! chsk\n                              #(assoc % :last-ws-close last-ws-close)))\n                          (do\n                            (swap-chsk-state! chsk\n                              #(assoc (chsk-state->closed % :unexpected)\n                                 :last-ws-close last-ws-close))\n                            (retry-fn)))))\n\n                    ?socket\n                    (try\n                      (create-websocket!\n                        {:onerror-fn   onerror-fn\n                         :onmessage-fn onmessage-fn\n                         :onclose-fn   onclose-fn\n                         :headers      headers\n                         :uri-str\n                         (enc/merge-url-with-query-string url\n                           (merge params ; 1st (don't clobber impl.):\n                             {:client-id client-id\n                              :csrf-token (:csrf-token @state_)}))})\n\n                      (catch #?(:clj Throwable :cljs :default) t\n                        (errorf t \"WebSocket error\")\n                        nil))]\n\n                (if-not ?socket\n                  (retry-fn) ; Couldn't even get a socket\n                  (do\n                    ;; Clean up the old socket if any exists\n                    (when-let [old-socket @socket_]\n                      #?(:clj  (.close ^WebSocketClient old-socket)\n                         :cljs (.close                  old-socket)))\n\n                    (reset! socket_ ?socket))))))]\n\n      (when-let [ms ws-kalive-ms]\n        (go-loop []\n          (let [udt-t0 @udt-last-comms_]\n            (<! (async/timeout ms))\n            (when (have-handle?)\n              (let [udt-t1 @udt-last-comms_]\n                (when (= udt-t0 udt-t1)\n                  ;; Ref. issue #259:\n                  ;; We've seen no send/recv activity on this\n                  ;; conn w/in our kalive window so send a ping\n                  ;; ->server (should auto-close conn if it's\n                  ;; gone dead). The server generally sends pings so\n                  ;; this should be rare. Mostly here to help clients\n                  ;; identify conns that were suddenly dropped.\n\n                  (-chsk-send! chsk [:chsk/ws-ping] {:flush? true})))\n              (recur)))))\n\n      (reset! retry-count_ 0)\n      (connect-fn)\n      chsk)))\n\n(defn- new-ChWebSocket [opts csrf-token]\n  (map->ChWebSocket\n    (merge\n      {:state_ (atom {:type :ws :open? false :ever-opened? false :csrf-token csrf-token})\n       :instance-handle_ (atom nil)\n       :retry-count_     (atom 0)\n       :ever-opened?_    (atom false)\n       :cbs-waiting_     (atom {})\n       :socket_          (atom nil)\n       :udt-last-comms_  (atom nil)}\n      opts)))\n\n(def ^:private default-client-side-ajax-timeout-ms\n  \"We must set *some* client-side timeout otherwise an unpredictable (and\n  probably too short) browser default will be used. Must be > server's\n  :lp-timeout-ms.\"\n  (enc/ms :secs 60))\n\n#?(:cljs\n   (defrecord ChAjaxSocket\n       ;; Ajax-only IChSocket implementation\n       ;; Handles (re)polling, etc.\n\n       [client-id chs params packer url state_\n        instance-handle_ ever-opened?_\n        backoff-ms-fn\n        ajax-opts curr-xhr_]\n\n     IChSocket\n     (-chsk-disconnect! [chsk reason]\n       (reset! instance-handle_ nil) ; Disable auto retry\n       (swap-chsk-state! chsk #(chsk-state->closed % reason))\n       (when-let [x @curr-xhr_] (.abort x)))\n\n     (-chsk-reconnect! [chsk]\n       (-chsk-disconnect! chsk :requested-reconnect)\n       (-chsk-connect!    chsk))\n\n     (-chsk-send! [chsk ev opts]\n       (let [{?timeout-ms :timeout-ms ?cb :cb :keys [flush?]} opts\n             _ (assert-send-args ev ?timeout-ms ?cb)\n             ?cb-fn (cb-chan-as-fn ?cb ev)]\n         (if-not (:open? @state_) ; Definitely closed\n           (chsk-send->closed! ?cb-fn)\n\n           ;; TODO Buffer before sending (but honor `:flush?`)\n           (let [csrf-token (:csrf-token @state_)]\n             (ajax-lite url\n               (merge ajax-opts\n                 {:method     :post\n                  :timeout-ms (or ?timeout-ms (:timeout-ms ajax-opts)\n                                  default-client-side-ajax-timeout-ms)\n                  :resp-type  :text ; We'll do our own pstr decoding\n                  :headers\n                  (merge\n                    (:headers ajax-opts) ; 1st (don't clobber impl.)\n                    {:X-CSRF-Token csrf-token})\n\n                  :params\n                  (let [ppstr (pack packer ev (when ?cb-fn :ajax-cb))]\n                    (merge params ; 1st (don't clobber impl.):\n                      {:udt        (enc/now-udt) ; Force uncached resp\n\n                       ;; A duplicate of X-CSRF-Token for user's convenience\n                       ;; and for back compatibility with earlier CSRF docs:\n                       :csrf-token csrf-token\n\n                       ;; Just for user's convenience here. non-lp-POSTs\n                       ;; don't actually need a client-id for Sente's own\n                       ;; implementation:\n                       :client-id  client-id\n\n                       :ppstr      ppstr}))})\n\n               (fn ajax-cb [{:keys [?error ?content]}]\n                 (if ?error\n                   (if (= ?error :timeout)\n                     (when ?cb-fn (?cb-fn :chsk/timeout))\n                     (do\n                       (swap-chsk-state! chsk\n                         #(chsk-state->closed % :unexpected))\n                       (when ?cb-fn (?cb-fn :chsk/error))))\n\n                   (let [content ?content\n                         resp-ppstr content\n                         [resp-clj _] (unpack packer resp-ppstr)]\n                     (if ?cb-fn\n                       (?cb-fn resp-clj)\n                       (when (not= resp-clj :chsk/dummy-cb-200)\n                         (warnf \"Cb reply w/o local cb-fn: %s\" resp-clj)))\n                     (swap-chsk-state! chsk #(assoc % :open? true))))))\n\n             :apparent-success))))\n\n     (-chsk-connect! [chsk]\n       (let [instance-handle (reset! instance-handle_ (enc/uuid-str))\n             have-handle? (fn [] (= @instance-handle_ instance-handle))\n             poll-fn ; async-poll-for-update-fn\n             (fn poll-fn [retry-count]\n               (tracef \"async-poll-for-update!\")\n               (when (have-handle?)\n                 (let [retry-fn\n                       (fn [] ; Backoff then recur\n                         (when (have-handle?)\n                           (let [retry-count* (inc retry-count)\n                                 backoff-ms (backoff-ms-fn retry-count*)\n                                 udt-next-reconnect (+ (enc/now-udt) backoff-ms)]\n                             (warnf \"Chsk is closed: will try reconnect attempt (%s) in %s ms\"\n                               retry-count* backoff-ms)\n                             (.setTimeout goog/global\n                               (fn [] (poll-fn retry-count*))\n                               backoff-ms)\n                             (swap-chsk-state! chsk\n                               #(assoc % :udt-next-reconnect udt-next-reconnect)))))]\n\n                   (reset! curr-xhr_\n                     (ajax-lite url\n                       (merge ajax-opts\n                         {:method     :get ; :timeout-ms timeout-ms\n                          :timeout-ms (or (:timeout-ms ajax-opts)\n                                        default-client-side-ajax-timeout-ms)\n                          :resp-type  :text ; Prefer to do our own pstr reading\n                          :params\n                          (merge\n                            ;; Note that user params here are actually POST\n                            ;; params for convenience. Contrast: WebSocket\n                            ;; params sent as query params since there's no\n                            ;; other choice there.\n                            params ; 1st (don't clobber impl.):\n\n                            {:udt       (enc/now-udt) ; Force uncached resp\n                             :client-id client-id}\n\n                            ;; A truthy :handshake? param will prompt server to\n                            ;; reply immediately with a handshake response,\n                            ;; letting us confirm that our client<->server comms\n                            ;; are working:\n                            (when-not (:open? @state_) {:handshake? true}))\n\n                          :headers\n                          (merge\n                            (:headers ajax-opts) ; 1st (don't clobber impl.)\n                            {:X-CSRF-Token (:csrf-token @state_)})})\n\n                       (fn ajax-cb [{:keys [?error ?content]}]\n                         (if ?error\n                           (cond\n                             (= ?error :timeout) (poll-fn 0)\n                             ;; (= ?error :abort) ; Abort => intentional, not an error\n                             :else\n                             (do\n                               (swap-chsk-state! chsk\n                                 #(chsk-state->closed % :unexpected))\n                               (retry-fn)))\n\n                           ;; The Ajax long-poller is used only for events, never cbs:\n                           (let [content ?content\n                                 ppstr content\n                                 [clj] (unpack packer ppstr)\n                                 handshake? (handshake? clj)]\n\n                             (when handshake?\n                               (receive-handshake! :ajax chsk clj))\n\n                             (swap-chsk-state! chsk #(assoc % :open? true))\n                             (poll-fn 0) ; Repoll asap\n\n                             (when-not handshake?\n                               (or\n                                 (when (= clj :chsk/timeout)\n                                   (when @debug-mode?_\n                                     (receive-buffered-evs! chs [[:debug/timeout]]))\n                                   :noop)\n\n                                 (let [buffered-evs clj] ; An application reply\n                                   (receive-buffered-evs! chs buffered-evs))))))))))))]\n\n         (poll-fn 0)\n         chsk))))\n\n#?(:cljs\n   (defn- new-ChAjaxSocket [opts csrf-token]\n     (map->ChAjaxSocket\n       (merge\n         {:state_           (atom {:type :ajax :open? false :ever-opened? false :csrf-token csrf-token})\n          :instance-handle_ (atom nil)\n          :ever-opened?_    (atom false)\n          :curr-xhr_        (atom nil)}\n         opts))))\n\n#?(:cljs\n   (defrecord ChAutoSocket\n       ;; Dynamic WebSocket/Ajax IChSocket implementation\n       ;; Wraps a swappable ChWebSocket/ChAjaxSocket\n\n       [ws-chsk-opts ajax-chsk-opts state_\n        impl_ ; ChWebSocket or ChAjaxSocket\n        ]\n\n     IChSocket\n     (-chsk-disconnect! [chsk reason]\n       (when-let [impl @impl_]\n         (-chsk-disconnect! impl reason)))\n\n     ;; Possibly reset impl type:\n     (-chsk-reconnect! [chsk]\n       (when-let [impl @impl_]\n         (-chsk-disconnect! impl :requested-reconnect)\n         (-chsk-connect!    chsk)))\n\n     (-chsk-send! [chsk ev opts]\n       (if-let [impl @impl_]\n         (-chsk-send! impl ev opts)\n         (let [{?cb :cb} opts\n               ?cb-fn (cb-chan-as-fn ?cb ev)]\n           (chsk-send->closed! ?cb-fn))))\n\n     (-chsk-connect! [chsk]\n       ;; Starting with a simple downgrade-only strategy here as a proof of concept\n       ;; TODO Later consider smarter downgrade or downgrade+upgrade strategies?\n       (let [ajax-chsk-opts (assoc ajax-chsk-opts :state_ state_)\n             ws-chsk-opts (assoc   ws-chsk-opts :state_ state_)\n\n             ajax-conn!\n             (fn []\n               ;; Remove :auto->:ajax downgrade watch\n               (remove-watch state_ :chsk/auto-ajax-downgrade)\n               (-chsk-connect! (new-ChAjaxSocket ajax-chsk-opts (:csrf-token @state_))))\n\n             ws-conn!\n             (fn []\n               ;; Configure :auto->:ajax downgrade watch\n               (let [downgraded?_ (atom false)]\n                 (add-watch state_ :chsk/auto-ajax-downgrade\n                   (fn [_ _ old-state new-state]\n                     (when-let [impl @impl_]\n                       (when-let [ever-opened?_ (:ever-opened?_ impl)]\n                         (when-not @ever-opened?_\n                           (when (:last-ws-error new-state)\n                             (when (compare-and-set! downgraded?_ false true)\n                               (warnf \"Permanently downgrading :auto chsk -> :ajax\")\n                               (-chsk-disconnect! impl :downgrading-ws-to-ajax)\n                               (reset! impl_ (ajax-conn!))))))))))\n\n               (-chsk-connect! (new-ChWebSocket ws-chsk-opts (:csrf-token @state_))))]\n\n         (reset! impl_ (or (ws-conn!) (ajax-conn!)))\n         chsk))))\n\n#?(:cljs\n   (defn- new-ChAutoSocket [opts csrf-token]\n     (map->ChAutoSocket\n       (merge\n         {:state_ (atom {:type :auto :open? false :ever-opened? false :csrf-token csrf-token})\n          :impl_  (atom nil)}\n         opts))))\n\n   (defn- get-chsk-url [protocol host path type]\n     (let [protocol (case protocol :http \"http:\" :https \"https:\" protocol)\n           protocol (have [:el #{\"http:\" \"https:\"}] protocol)\n           protocol (case type\n                      :ajax     protocol\n                      :ws (case protocol \"https:\" \"wss:\" \"http:\" \"ws:\"))]\n       (str protocol \"//\" (enc/path host path))))\n\n   (defn make-channel-socket-client!\n     \"Returns nil on failure, or a map with keys:\n       :ch-recv ; core.async channel to receive `event-msg`s (internal or from\n                ; clients). May `put!` (inject) arbitrary `event`s to this channel.\n       :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n       :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n       :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n     Common options:\n       :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto).\n       :protocol       ; Server protocol, e/o #{:http :https}.\n       :host           ; Server host (defaults to current page's host).\n       :port           ; Server port (defaults to current page's port).\n       :params         ; Map of any params to incl. in chsk Ring requests (handy\n                       ; for application-level auth, etc.).\n       :headers        ; Map of additional headers to include in the initiating request\n                       ; (currently only for Java clients).\n       :packer         ; :edn (default), or an IPacker implementation.\n       :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`.\n       :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n       :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to server's :ws-kalive-ms.\"\n\n     [path ?csrf-token &\n      [{:keys [type protocol host port params headers recv-buf-or-n packer ws-kalive-ms\n               client-id ajax-opts wrap-recv-evs? backoff-ms-fn]\n        :as   opts\n        :or   {type           :auto\n               recv-buf-or-n  (async/sliding-buffer 2048) ; Mostly for buffered-evs\n               packer         :edn\n               client-id      (or (:client-uuid opts) ; Backwards compatibility\n                                  (enc/uuid-str))\n               wrap-recv-evs? true\n               backoff-ms-fn  enc/exp-backoff\n               ws-kalive-ms   (enc/ms :secs 20)}}\n\n       _deprecated-more-opts]]\n\n     (have? [:in #{:ajax :ws :auto}] type)\n     (have? enc/nblank-str? client-id)\n\n     (when (not (nil? _deprecated-more-opts)) (warnf \"`make-channel-socket-client!` fn signature CHANGED with Sente v0.10.0.\"))\n     (when (contains? opts :lp-timeout) (warnf \":lp-timeout opt has CHANGED; please use :lp-timout-ms.\"))\n\n     (when (or (not (string? ?csrf-token)) (str/blank? ?csrf-token))\n       (warnf \"WARNING: no CSRF token provided. Connections will FAIL if server-side CSRF check is enabled (as it is by default).\"))\n\n     (let [packer (coerce-packer packer)\n\n           [ws-url ajax-url]\n           (let [;; Not available with React Native, etc.\n                 ;; Must always provide explicit path for Java client.\n                 win-loc  #?(:clj nil :cljs (enc/get-win-loc))\n                 path     (have (or path (:pathname win-loc)))]\n\n             (if-let [f (:chsk-url-fn opts)] ; Deprecated\n               [(f path win-loc :ws)\n                (f path win-loc :ajax)]\n\n               (let [protocol (or protocol (:protocol win-loc) :http)\n                     host\n                     (if host\n                       (if port (str host \":\" port) host)\n                       (if port\n                         (str (:hostname win-loc) \":\" port)\n                         (do  (:host     win-loc))))]\n\n                 [(get-chsk-url protocol host path :ws)\n                  (get-chsk-url protocol host path :ajax)])))\n\n           private-chs\n           {:internal (chan (async/sliding-buffer 128))\n            :state    (chan (async/sliding-buffer 10))\n            :<server\n            (let [;; Nb must be >= max expected buffered-evs size:\n                  buf (async/sliding-buffer 512)]\n              (if wrap-recv-evs?\n                (chan buf (map (fn [ev] [:chsk/recv ev])))\n                (chan buf)))}\n\n           common-chsk-opts\n           {:client-id    client-id\n            :chs          private-chs\n            :params       params\n            :headers      headers\n            :packer       packer\n            :ws-kalive-ms ws-kalive-ms}\n\n           ws-chsk-opts\n           (merge common-chsk-opts\n             {:url           ws-url\n              :backoff-ms-fn backoff-ms-fn})\n\n           ajax-chsk-opts\n           (merge common-chsk-opts\n             {:url           ajax-url\n              :ajax-opts     ajax-opts\n              :backoff-ms-fn backoff-ms-fn})\n\n           auto-chsk-opts\n           {:ws-chsk-opts   ws-chsk-opts\n            :ajax-chsk-opts ajax-chsk-opts}\n\n           ?chsk\n           (-chsk-connect!\n             (case type\n               :ws      (new-ChWebSocket    ws-chsk-opts ?csrf-token)\n               :ajax\n               #?(:cljs (new-ChAjaxSocket ajax-chsk-opts ?csrf-token)\n                  :clj  (throw (UnsupportedOperationException.\n                                 \"Only :ws channel socket type supported for clj\")))\n               :auto\n               #?(:cljs (new-ChAutoSocket auto-chsk-opts ?csrf-token)\n                  :clj  (throw (UnsupportedOperationException.\n                                 \"Only :ws channel socket type supported for clj\")))))]\n\n       (if-let [chsk ?chsk]\n         (let [chsk-state_ (:state_ chsk)\n               internal-ch (:internal private-chs)\n               send-fn (partial chsk-send! chsk)\n               ev-ch\n               (async/merge\n                 [(:internal private-chs)\n                  (:state    private-chs)\n                  (:<server  private-chs)]\n                 recv-buf-or-n)\n\n               ev-msg-ch\n               (async/chan 1\n                 (map\n                   (fn [ev]\n                     (let [[ev-id ev-?data :as ev] (as-event ev)]\n                       {;; Allow client to inject into router for handler:\n                        :ch-recv internal-ch\n                        :send-fn send-fn\n                        :state   chsk-state_\n                        :event   ev\n                        :id      ev-id\n                        :?data   ev-?data}))))]\n\n           (async/pipe ev-ch ev-msg-ch)\n\n           {:chsk    chsk\n            :ch-recv ev-msg-ch\n            :send-fn send-fn\n            :state   (:state_ chsk)})\n\n         (warnf \"Failed to create channel socket\"))))\n\n;;;; Event-msg routers (handler loops)\n\n(defn- -start-chsk-router!\n  [server? ch-recv event-msg-handler opts]\n  (let [{:keys [trace-evs? error-handler simple-auto-threading?]} opts\n        ch-ctrl (chan)\n\n        execute1\n        #?(:cljs (fn [f] (f))\n           :clj\n           (if simple-auto-threading?\n             (fn [f] (future-call f))\n             (fn [f] (f))))]\n\n    (go-loop []\n      (let [[v p] (async/alts! [ch-recv ch-ctrl])\n            stop? (or (= p ch-ctrl) (nil? v))]\n\n        (when-not stop?\n          (let [{:as event-msg :keys [event]} v]\n\n            (execute1\n              (fn []\n                (enc/catching\n                  (do\n                    (when trace-evs? (tracef \"Pre-handler event: %s\" event))\n                    (event-msg-handler\n                      (if server?\n                        (have! server-event-msg? event-msg)\n                        (have! client-event-msg? event-msg))))\n                  e1\n                  (enc/catching\n                    (if-let [eh error-handler]\n                      (error-handler e1 event-msg)\n                      (errorf e1 \"Chsk router `event-msg-handler` error: %s\" event))\n                    e2 (errorf e2 \"Chsk router `error-handler` error: %s\"     event)))))\n\n            (recur)))))\n\n    (fn stop! [] (async/close! ch-ctrl))))\n\n(defn start-server-chsk-router!\n  \"Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\n\n  Or for simple automatic future-based threading of every request, enable\n  the `:simple-auto-threading?` opt (disabled by default).\"\n  [ch-recv event-msg-handler &\n   [{:as opts :keys [trace-evs? error-handler simple-auto-threading?]}]]\n  (-start-chsk-router! :server ch-recv event-msg-handler opts))\n\n(defn start-client-chsk-router!\n  \"Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\"\n  [ch-recv event-msg-handler &\n   [{:as opts :keys [trace-evs? error-handler]}]]\n  (-start-chsk-router! (not :server) ch-recv event-msg-handler opts))\n\n;;;; Platform aliases\n\n(def event-msg? #?(:clj server-event-msg? :cljs client-event-msg?))\n\n(def make-channel-socket!\n  \"Platform-specific alias for `make-channel-socket-server!` or\n  `make-channel-socket-client!`. Please see the appropriate aliased fn\n   docstring for details.\"\n  #?(:clj  make-channel-socket-server!\n     :cljs make-channel-socket-client!))\n\n(def start-chsk-router!\n  \"Platform-specific alias for `start-server-chsk-router!` or\n  `start-client-chsk-router!`. Please see the appropriate aliased fn\n  docstring for details.\"\n  #?(:clj  start-server-chsk-router!\n     :cljs start-client-chsk-router!))\n\n;;;; Deprecated\n\n(enc/deprecated\n  #?(:clj\n     (defn start-chsk-router-loop!\n       \"DEPRECATED: Please use `start-chsk-router!` instead\"\n       [event-msg-handler ch-recv]\n       (start-server-chsk-router! ch-recv\n         ;; Old handler form: (fn [ev-msg ch-recv])\n         (fn [ev-msg] (event-msg-handler ev-msg (:ch-recv ev-msg))))))\n\n  #?(:cljs\n     (defn start-chsk-router-loop!\n       \"DEPRECATED: Please use `start-chsk-router!` instead\"\n       [event-handler ch-recv]\n       (start-client-chsk-router! ch-recv\n         ;; Old handler form: (fn [ev ch-recv])\n         (fn [ev-msg] (event-handler (:event ev-msg) (:ch-recv ev-msg))))))\n\n  (def set-logging-level! \"DEPRECATED. Please use `timbre/set-level!` instead\" timbre/set-level!)\n\n  #?(:cljs (def ajax-call \"DEPRECATED: Please use `ajax-lite` instead\" enc/ajax-lite))\n  #?(:cljs\n     (def default-chsk-url-fn \"DEPRECATED\"\n       (fn [path {:as location :keys [protocol host pathname]} websocket?]\n         (let [protocol\n               (if websocket?\n                 (if (= protocol \"https:\") \"wss:\" \"ws:\")\n                 protocol)]\n           (str protocol \"//\" host (or path pathname)))))))\n"]}