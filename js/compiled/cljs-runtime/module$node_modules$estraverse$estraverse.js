shadow$provide.module$node_modules$estraverse$estraverse=function(global,require,module,exports$jscomp$0){(function clone(exports){function deepCopy(obj){var ret={},key;for(key in obj)if(obj.hasOwnProperty(key)){var val=obj[key];ret[key]="object"===typeof val&&null!==val?deepCopy(val):val}return ret}function upperBound(array,func){var i;var len=array.length;for(i=0;len;){var diff=len>>>1;var current=i+diff;func(array[current])?len=diff:(i=current+1,len-=diff+1)}return i}function Reference(parent,
key){this.parent=parent;this.key=key}function Element(node,path,wrap,ref){this.node=node;this.path=path;this.wrap=wrap;this.ref=ref}function Controller(){}function isNode(node){return null==node?!1:"object"===typeof node&&"string"===typeof node.type}function traverse(root,visitor){return(new Controller).traverse(root,visitor)}function extendCommentRange(comment,tokens){var target=upperBound(tokens,function(token){return token.range[0]>comment.range[0]});comment.extendedRange=[comment.range[0],comment.range[1]];
target!==tokens.length&&(comment.extendedRange[1]=tokens[target].range[0]);--target;0<=target&&(comment.extendedRange[0]=tokens[target].range[1]);return comment}var Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",
CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ComprehensionBlock:"ComprehensionBlock",ComprehensionExpression:"ComprehensionExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DebuggerStatement:"DebuggerStatement",DirectiveStatement:"DirectiveStatement",DoWhileStatement:"DoWhileStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",
ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForInStatement:"ForInStatement",ForOfStatement:"ForOfStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",GeneratorExpression:"GeneratorExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportExpression:"ImportExpression",ImportDeclaration:"ImportDeclaration",
ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",ModuleSpecifier:"ModuleSpecifier",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",
ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchStatement:"SwitchStatement",SwitchCase:"SwitchCase",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",
WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"};var VisitorKeys={AssignmentExpression:["left","right"],AssignmentPattern:["left","right"],ArrayExpression:["elements"],ArrayPattern:["elements"],ArrowFunctionExpression:["params","body"],AwaitExpression:["argument"],BlockStatement:["body"],BinaryExpression:["left","right"],BreakStatement:["label"],CallExpression:["callee","arguments"],CatchClause:["param","body"],ClassBody:["body"],ClassDeclaration:["id",
"superClass","body"],ClassExpression:["id","superClass","body"],ComprehensionBlock:["left","right"],ComprehensionExpression:["blocks","filter","body"],ConditionalExpression:["test","consequent","alternate"],ContinueStatement:["label"],DebuggerStatement:[],DirectiveStatement:[],DoWhileStatement:["body","test"],EmptyStatement:[],ExportAllDeclaration:["source"],ExportDefaultDeclaration:["declaration"],ExportNamedDeclaration:["declaration","specifiers","source"],ExportSpecifier:["exported","local"],ExpressionStatement:["expression"],
ForStatement:["init","test","update","body"],ForInStatement:["left","right","body"],ForOfStatement:["left","right","body"],FunctionDeclaration:["id","params","body"],FunctionExpression:["id","params","body"],GeneratorExpression:["blocks","filter","body"],Identifier:[],IfStatement:["test","consequent","alternate"],ImportExpression:["source"],ImportDeclaration:["specifiers","source"],ImportDefaultSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportSpecifier:["imported","local"],Literal:[],
LabeledStatement:["label","body"],LogicalExpression:["left","right"],MemberExpression:["object","property"],MetaProperty:["meta","property"],MethodDefinition:["key","value"],ModuleSpecifier:[],NewExpression:["callee","arguments"],ObjectExpression:["properties"],ObjectPattern:["properties"],Program:["body"],Property:["key","value"],RestElement:["argument"],ReturnStatement:["argument"],SequenceExpression:["expressions"],SpreadElement:["argument"],Super:[],SwitchStatement:["discriminant","cases"],SwitchCase:["test",
"consequent"],TaggedTemplateExpression:["tag","quasi"],TemplateElement:[],TemplateLiteral:["quasis","expressions"],ThisExpression:[],ThrowStatement:["argument"],TryStatement:["block","handler","finalizer"],UnaryExpression:["argument"],UpdateExpression:["argument"],VariableDeclaration:["declarations"],VariableDeclarator:["id","init"],WhileStatement:["test","body"],WithStatement:["object","body"],YieldExpression:["argument"]};var BREAK={};var SKIP={};var REMOVE={};var VisitorOption={Break:BREAK,Skip:SKIP,
Remove:REMOVE};Reference.prototype.replace=function(node){this.parent[this.key]=node};Reference.prototype.remove=function(){if(Array.isArray(this.parent))return this.parent.splice(this.key,1),!0;this.replace(null);return!1};Controller.prototype.path=function(){function addToPath(result,path){if(Array.isArray(path))for(j=0,jz=path.length;j<jz;++j)result.push(path[j]);else result.push(path)}var iz,j,jz;if(!this.__current.path)return null;var result$jscomp$0=[];var i=2;for(iz=this.__leavelist.length;i<
iz;++i){var element=this.__leavelist[i];addToPath(result$jscomp$0,element.path)}addToPath(result$jscomp$0,this.__current.path);return result$jscomp$0};Controller.prototype.type=function(){return this.current().type||this.__current.wrap};Controller.prototype.parents=function(){var iz;var result=[];var i=1;for(iz=this.__leavelist.length;i<iz;++i)result.push(this.__leavelist[i].node);return result};Controller.prototype.current=function(){return this.__current.node};Controller.prototype.__execute=function(callback,
element){var result=void 0;var previous=this.__current;this.__current=element;this.__state=null;callback&&(result=callback.call(this,element.node,this.__leavelist[this.__leavelist.length-1].node));this.__current=previous;return result};Controller.prototype.notify=function(flag){this.__state=flag};Controller.prototype.skip=function(){this.notify(SKIP)};Controller.prototype["break"]=function(){this.notify(BREAK)};Controller.prototype.remove=function(){this.notify(REMOVE)};Controller.prototype.__initialize=
function(root,visitor){this.visitor=visitor;this.root=root;this.__worklist=[];this.__leavelist=[];this.__fallback=this.__state=this.__current=null;"iteration"===visitor.fallback?this.__fallback=Object.keys:"function"===typeof visitor.fallback&&(this.__fallback=visitor.fallback);this.__keys=VisitorKeys;visitor.keys&&(this.__keys=Object.assign(Object.create(this.__keys),visitor.keys))};Controller.prototype.traverse=function(root,visitor){var current,current2,candidate;this.__initialize(root,visitor);
var sentinel={};var worklist=this.__worklist;var leavelist=this.__leavelist;worklist.push(new Element(root,null,null,null));for(leavelist.push(new Element(null,null,null,null));worklist.length;)if(root=worklist.pop(),root===sentinel){root=leavelist.pop();var node=this.__execute(visitor.leave,root);if(this.__state===BREAK||node===BREAK)break}else if(root.node){node=this.__execute(visitor.enter,root);if(this.__state===BREAK||node===BREAK)break;worklist.push(sentinel);leavelist.push(root);if(this.__state!==
SKIP&&node!==SKIP){node=root.node;var nodeType=node.type||root.wrap;var candidates=this.__keys[nodeType];if(!candidates)if(this.__fallback)candidates=this.__fallback(node);else throw Error("Unknown node type "+nodeType+".");for(current=candidates.length;0<=--current;){var key=candidates[current];if(candidate=node[key])if(Array.isArray(candidate))for(current2=candidate.length;0<=--current2;){if(candidate[current2]){if(nodeType!==Syntax.ObjectExpression&&nodeType!==Syntax.ObjectPattern||"properties"!==
candidates[current])if(isNode(candidate[current2]))root=new Element(candidate[current2],[key,current2],null,null);else continue;else root=new Element(candidate[current2],[key,current2],"Property",null);worklist.push(root)}}else isNode(candidate)&&worklist.push(new Element(candidate,key,null,null))}}}};Controller.prototype.replace=function(root,visitor){function removeElem(element){if(element.ref.remove()){var key=element.ref.key;var parent=element.ref.parent;for(element=worklist.length;element--;){var nextElem=
worklist[element];if(nextElem.ref&&nextElem.ref.parent===parent){if(nextElem.ref.key<key)break;--nextElem.ref.key}}}}var current,current2,candidate;this.__initialize(root,visitor);var sentinel={};var worklist=this.__worklist;var leavelist=this.__leavelist;var outer={root};var element$jscomp$0=new Element(root,null,null,new Reference(outer,"root"));worklist.push(element$jscomp$0);for(leavelist.push(element$jscomp$0);worklist.length;)if(element$jscomp$0=worklist.pop(),element$jscomp$0===sentinel){element$jscomp$0=
leavelist.pop();var nodeType=this.__execute(visitor.leave,element$jscomp$0);void 0!==nodeType&&nodeType!==BREAK&&nodeType!==SKIP&&nodeType!==REMOVE&&element$jscomp$0.ref.replace(nodeType);this.__state!==REMOVE&&nodeType!==REMOVE||removeElem(element$jscomp$0);if(this.__state===BREAK||nodeType===BREAK)break}else{nodeType=this.__execute(visitor.enter,element$jscomp$0);void 0!==nodeType&&nodeType!==BREAK&&nodeType!==SKIP&&nodeType!==REMOVE&&(element$jscomp$0.ref.replace(nodeType),element$jscomp$0.node=
nodeType);if(this.__state===REMOVE||nodeType===REMOVE)removeElem(element$jscomp$0),element$jscomp$0.node=null;if(this.__state===BREAK||nodeType===BREAK)break;if(root=element$jscomp$0.node)if(worklist.push(sentinel),leavelist.push(element$jscomp$0),this.__state!==SKIP&&nodeType!==SKIP){nodeType=root.type||element$jscomp$0.wrap;var candidates=this.__keys[nodeType];if(!candidates)if(this.__fallback)candidates=this.__fallback(root);else throw Error("Unknown node type "+nodeType+".");for(current=candidates.length;0<=
--current;){var key$jscomp$0=candidates[current];if(candidate=root[key$jscomp$0])if(Array.isArray(candidate))for(current2=candidate.length;0<=--current2;){if(candidate[current2]){if(nodeType!==Syntax.ObjectExpression&&nodeType!==Syntax.ObjectPattern||"properties"!==candidates[current])if(isNode(candidate[current2]))element$jscomp$0=new Element(candidate[current2],[key$jscomp$0,current2],null,new Reference(candidate,current2));else continue;else element$jscomp$0=new Element(candidate[current2],[key$jscomp$0,
current2],"Property",new Reference(candidate,current2));worklist.push(element$jscomp$0)}}else isNode(candidate)&&worklist.push(new Element(candidate,key$jscomp$0,null,new Reference(root,key$jscomp$0)))}}}return outer.root};exports.version=require("module$node_modules$estraverse$package_json").version;exports.Syntax=Syntax;exports.traverse=traverse;exports.replace=function(root,visitor){return(new Controller).replace(root,visitor)};exports.attachComments=function(tree,providedComments,tokens){var comments=
[],len;if(!tree.range)throw Error("attachComments needs range information");if(!tokens.length){if(providedComments.length){var i=0;for(len=providedComments.length;i<len;i+=1)tokens=deepCopy(providedComments[i]),tokens.extendedRange=[0,tree.range[0]],comments.push(tokens);tree.leadingComments=comments}return tree}i=0;for(len=providedComments.length;i<len;i+=1)comments.push(extendCommentRange(deepCopy(providedComments[i]),tokens));var cursor=0;traverse(tree,{enter:function(node){for(var comment;cursor<
comments.length;){comment=comments[cursor];if(comment.extendedRange[1]>node.range[0])break;comment.extendedRange[1]===node.range[0]?(node.leadingComments||(node.leadingComments=[]),node.leadingComments.push(comment),comments.splice(cursor,1)):cursor+=1}if(cursor===comments.length)return VisitorOption.Break;if(comments[cursor].extendedRange[0]>node.range[1])return VisitorOption.Skip}});cursor=0;traverse(tree,{leave:function(node){for(var comment;cursor<comments.length;){comment=comments[cursor];if(node.range[1]<
comment.extendedRange[0])break;node.range[1]===comment.extendedRange[0]?(node.trailingComments||(node.trailingComments=[]),node.trailingComments.push(comment),comments.splice(cursor,1)):cursor+=1}if(cursor===comments.length)return VisitorOption.Break;if(comments[cursor].extendedRange[0]>node.range[1])return VisitorOption.Skip}});return tree};exports.VisitorKeys=VisitorKeys;exports.VisitorOption=VisitorOption;exports.Controller=Controller;exports.cloneEnvironment=function(){return clone({})};return exports})(exports$jscomp$0)}
//# sourceMappingURL=module$node_modules$estraverse$estraverse.js.map
