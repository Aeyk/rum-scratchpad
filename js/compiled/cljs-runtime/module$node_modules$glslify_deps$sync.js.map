{
"version":3,
"file":"module$node_modules$glslify_deps$sync.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/glslify-deps/sync.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$glslify_deps$sync\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar tokenize = require('glsl-tokenizer/string')\nvar findup   = require('@choojs/findup').sync\nvar fs       = require('graceful-fs')\nvar map      = require('map-limit')\nvar inherits = require('inherits')\nvar Emitter  = require('events/')\nvar path     = require('path')\n\nvar glslResolve = require('glsl-resolve').sync\nvar nodeResolve = require('resolve').sync\n\nvar inlineName   = '__INLINE__' + Math.random()\nvar inlineSource = ''\n\nmodule.exports = Depper\n\n/**\n * Creates a new instance of glslify-deps. Generally, you'll\n * want to use one instance per bundle.\n *\n * @class\n * @param {String} cwd The root directory of your shader. Defaults to process.cwd()\n */\ninherits(Depper, Emitter)\nfunction Depper(opts) {\n  if (!(this instanceof Depper)) return new Depper(opts)\n  Emitter.call(this)\n\n  opts = typeof opts === 'string' ? { cwd: opts } : opts\n  opts = opts || {}\n\n  this._deps       = []\n  this._cwd        = opts.cwd || process.cwd()\n  this._cache      = {}\n  this._i          = 0\n  this._transforms = []\n  this._trCache    = {}\n  this._fileCache  = opts.files || {}\n\n  this._globalTransforms = []\n\n  this._readFile = cacheWrap(opts.readFileSync || defaultRead, this._fileCache)\n  this.resolve   = opts.resolve || glslResolve\n\n  if (typeof this._cwd !== 'string') {\n    throw new Error('glslify-deps: cwd must be a string path')\n  }\n}\n\nDepper.prototype.inline = function(source, basedir) {\n  var inlineFile = path.resolve(basedir || process.cwd(), inlineName)\n\n  inlineSource = source\n\n  return this.add(inlineFile)\n}\n\n/**\n * Adds a transform to use on your local dependencies.\n * Note that this should be used before calling `add`.\n *\n * Transforms are handled using a different API to browserify, e.g.:\n *\n * ``` js\n * exports.sync = function transform(filename, src, opts) {\n *   return src.toUpperCase()\n * }\n * ```\n * \n * This is also different from the async transform API.\n *\n * Where `filename` is the absolute file path, `src` is the shader source\n * as a string, `opts` is an options object for configuration.\n *\n * @param {String|Function} transform\n * @param {Object} opts\n */\nDepper.prototype.transform = function(transform, opts) {\n  var name = typeof transform === 'string' ? transform : null\n  var list = opts && opts.global\n    ? this._globalTransforms\n    : this._transforms\n\n  // post transforms are ignored by glslify-deps, to be handled\n  // by glslify after the file has been bundled.\n  if (opts && opts.post) return this\n\n  transform = this.resolveTransform(transform)\n  list.push({ tr: transform, opts: opts, name: name })\n\n  return this\n}\n\n/**\n * Adds a shader file to the graph, including its dependencies\n * which are resolved in this step. Transforms are also applied\n * in the process too, as they may potentially add or remove dependent\n * modules.\n *\n * @param {String} filename The absolute path of this file.\n * @param {String} src The shader source for this file.\n *\n * Returns an array of dependencies discovered so far as its second argument.\n */\nDepper.prototype.add = function(filename) {\n  var basedir = path.dirname(filename = path.resolve(filename))\n  var cache   = this._cache\n  var self    = this\n  var exports = []\n  var imports = []\n\n  var dep = {\n      id: this._i++\n    , deps: {}\n    , file: filename\n    , source: null\n    , entry: this._i === 1\n  }\n\n  this._deps.push(dep)\n  var src = this.readFile(filename)\n  var trs = self.getTransformsForFile(filename)\n  self.emit('file', filename)\n  src = self.applyTransforms(filename, src, trs)\n  dep.source = src\n  extractPreprocessors()\n\n  resolveImports()\n  return self._deps\n\n  function extractPreprocessors() {\n    var tokens = tokenize(dep.source)\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n      if (token.type !== 'preprocessor') continue\n\n      var data = token.data\n      if (!glslifyPreprocessor(data)) continue\n\n      var exp = glslifyExport(data)\n      var imp = glslifyImport(data)\n      if (exp) exports.push(exp[1])\n      if (imp) imports.push(imp[2])\n    }\n  }\n\n  function resolveImports(resolved) {\n    imports.forEach(function (imp) {\n      var importName = imp.split(/\\s*,\\s*/).shift()\n\n      importName = importName.trim()\n      importName = importName.replace(/^'|'$/g, '')\n      importName = importName.replace(/^\"|\"$/g, '')\n\n      var resolved = self.resolve(importName, { basedir: basedir })\n      if (cache[resolved]) {\n        dep.deps[importName] = cache[resolved].id\n      }\n      var i = self._i\n      cache[resolved] = self.add(resolved)[i]\n      dep.deps[importName] = cache[resolved].id\n    })\n  }\n}\n\nDepper.prototype.readFile = function(filename) {\n  if (path.basename(filename) !== inlineName)\n    return this._readFile(filename)\n\n  return inlineSource\n}\n\n/**\n * Determines which transforms to use for a particular file.\n * The rules here are the same you see in browserify:\n *\n * - your shader files will have your specified transforms applied to them\n * - shader files in node_modules do not get local transforms\n * - all files will apply transforms specified in `glslify.transform` in your\n *   `package.json` file, albeit after any transforms you specified using\n *   `depper.transform`.\n *\n * @param {String} filename The absolute path of the file in question.\n */\nDepper.prototype.getTransformsForFile = function(filename) {\n  var self  = this\n  var entry = this._deps[0]\n\n  if (!entry) throw new Error(\n    'getTransformsForFile may only be called after adding your entry file'\n  )\n\n  var entryDir     = path.dirname(path.resolve(entry.file))\n  var fileDir      = path.dirname(path.resolve(filename))\n  var relative     = path.relative(entryDir, fileDir).split(path.sep)\n  var node_modules = relative.indexOf('node_modules') !== -1\n  var trLocal      = node_modules ? [] : this._transforms\n  var trCache      = this._trCache\n\n  if (trCache[fileDir]) {\n    return trCache[fileDir]\n  }\n\n  try { var found = findup(fileDir, 'package.json') }\n  catch (err) {\n    var notFound = err.message === 'not found'\n    if (notFound) return register([])\n    else throw err\n  }\n\n  var pkg = path.join(found, 'package.json')\n  var pkgjson = JSON.parse(self.readFile(pkg))\n\n  var transforms = (\n       pkgjson['glslify']\n    && pkgjson['glslify']['transform']\n    || []\n  )\n\n  transforms = transforms.map(function(key) {\n    var transform = Array.isArray(key)\n      ? key\n      : [key, {}]\n\n    var key = transform[0]\n    var opt = transform[1]\n\n    if (opt) {\n      delete opt.global\n      delete opt.post\n    }\n\n    return { tr: key, opts: opt, name: key }\n  }).map(function(tr) {\n    tr.tr = self.resolveTransform(tr.tr)\n    return tr\n  })\n\n  return register(transforms)\n\n  function register(transforms) {\n    return trCache[fileDir] = trLocal\n      .concat(transforms)\n      .concat(self._globalTransforms)\n  }\n}\n\n/**\n * Resolves a transform.\n *\n * Functions are retained as-is.\n * Strings are resolved using node's `require` resolution algorithm,\n * and then required directly.\n *\n * @param {String|Function} transform\n */\nDepper.prototype.resolveTransform = function(transform) {\n  if (typeof transform === 'string') {\n    transform = nodeResolve(transform, {\n      basedir: this._cwd\n    })\n\n    var m = require(transform)\n    if (!m || typeof m.sync !== 'function') {\n      throw new Error('transform ' + transform + ' does not provide a'\n        + ' synchronous interface')\n    }\n    transform = m.sync\n  }\n  return transform\n}\n\n/**\n * Applies a transform to a string.\n *\n * Note that transforms here are passed in differently to other methods:\n * - `tr.tr` should point to the transform function.\n * - `tr.opts` should contain the options for the transform, if applicable.\n *\n * @param {String} filename The absolute path of the file you're transforming.\n * @param {String} src The shader source you'd like to transform.\n * @param {Array} transforms The transforms you'd like to apply.\n *\n * Returns the transformed source string.\n */\nDepper.prototype.applyTransforms = function(filename, src, transforms) {\n  transforms.forEach(function (tr) {\n    var opts = tr.opts\n    if (!opts || typeof opts !== 'object') opts = {}\n    src = tr.tr(filename, src+'', tr.opts)\n  })\n  return src\n}\n\nfunction glslifyPreprocessor(data) {\n  return /#pragma glslify:/.test(data)\n}\n\nfunction glslifyExport(data) {\n  return /#pragma glslify:\\s*export\\(([^\\)]+)\\)/.exec(data)\n}\n\nfunction glslifyImport(data) {\n  return /#pragma glslify:\\s*([^=\\s]+)\\s*=\\s*require\\(([^\\)]+)\\)/.exec(data)\n}\n\nfunction defaultRead(src) {\n  return fs.readFileSync(src, 'utf8')\n}\n\nfunction cacheWrap(read, cache) {\n  // resolve all cached files such that they match\n  // all of the paths glslify handles, which are otherwise\n  // absolute\n  cache = Object.keys(cache).reduce(function(newCache, file) {\n    newCache[path.resolve(file)] = cache[file]\n    return newCache\n  }, {})\n\n  return function readFromCache(filename) {\n    if (!cache[filename]) {\n      cache[filename] = read(filename)\n    }\n    return cache[filename]\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Depper","opts","Emitter","call","cwd","_deps","_cwd","process","_cache","_i","_transforms","_trCache","_fileCache","files","_globalTransforms","_readFile","cacheWrap","readFileSync","defaultRead","resolve","glslResolve","Error","src","fs","read","cache","Object","keys","reduce","newCache","file","path","readFromCache","filename","tokenize","findup","sync","inherits","nodeResolve","inlineName","Math","random","inlineSource","prototype","inline","Depper.prototype.inline","source","basedir","inlineFile","add","transform","Depper.prototype.transform","name","list","post","resolveTransform","push","tr","Depper.prototype.add","dirname","self","imports","dep","id","deps","entry","readFile","trs","getTransformsForFile","emit","applyTransforms","extractPreprocessors","tokens","i","length","token","type","data","test","exp","exec","imp","resolveImports","resolved","forEach","importName","split","shift","trim","replace","Depper.prototype.readFile","basename","Depper.prototype.getTransformsForFile","entryDir","fileDir","trLocal","relative","sep","indexOf","trCache","found","err","message","concat","transforms","pkg","join","pkgjson","JSON","parse","map","key","Array","isArray","opt","Depper.prototype.resolveTransform","m","Depper.prototype.applyTransforms"]
}
