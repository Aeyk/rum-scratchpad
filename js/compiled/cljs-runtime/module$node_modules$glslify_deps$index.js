shadow$provide.module$node_modules$glslify_deps$index=function(global,require,module,exports$jscomp$0){function Depper(opts){if(!(this instanceof Depper))return new Depper(opts);Emitter.call(this);opts=(opts="string"===typeof opts?{cwd:opts}:opts)||{};this._deps=[];this._cwd=opts.cwd||process.cwd();this._cache={};this._i=0;this._transforms=[];this._trCache={};this._fileCache=opts.files||{};this._globalTransforms=[];this._readFile=cacheWrap(opts.readFile||defaultRead,this._fileCache);this.resolve=
opts.resolve||glslResolve;if("string"!==typeof this._cwd)throw Error("glslify-deps: cwd must be a string path");}function defaultRead(src,done){fs.readFile(src,"utf8",done)}function cacheWrap(read,cache){cache=Object.keys(cache).reduce(function(newCache,file){newCache[path.resolve(file)]=cache[file];return newCache},{});return function(filename,done){if(!cache[filename])return read(filename,done);process.nextTick(function(){done(null,cache[filename])})}}var process=require("module$node_modules$process$browser"),
tokenize=require("module$node_modules$glsl_tokenizer$string"),findup=require("module$node_modules$$choojs$findup$index"),fs=require("module$node_modules$graceful_fs$graceful_fs"),map=require("module$node_modules$map_limit$index");global=require("module$node_modules$inherits$inherits_browser");var Emitter=require("module$node_modules$events$events"),path=require("module$node_modules$path_browserify$index"),glslResolve=require("module$node_modules$glsl_resolve$index"),nodeResolve=require("module$node_modules$resolve$index"),
inlineName="__INLINE__"+Math.random(),inlineSource="";module.exports=Depper;global(Depper,Emitter);Depper.prototype.inline=function(source,basedir,done){basedir=path.resolve(basedir||process.cwd(),inlineName);inlineSource=source;this.add(basedir,function(err,tree){done&&done(err,!err&&tree)})};Depper.prototype.transform=function(transform,opts){var name="string"===typeof transform?transform:null,list=opts&&opts.global?this._globalTransforms:this._transforms;if(opts&&opts.post)return this;transform=
this.resolveTransform(transform);list.push({tr:transform,opts,name});return this};Depper.prototype.add=function(filename,done){function extractPreprocessors(){for(var tokens=tokenize(dep.source),i=0;i<tokens.length;i++){var token=tokens[i];if("preprocessor"===token.type){var data=token.data;/#pragma glslify:/.test(data)&&(token=/#pragma glslify:\s*export\(([^\)]+)\)/.exec(data),data=/#pragma glslify:\s*([^=\s]+)\s*=\s*require\(([^\)]+)\)/.exec(data),token&&exports.push(token[1]),data&&imports.push(data[2]))}}}
function resolveImports(resolved$jscomp$0){map(imports,10,function(imp,next){var importName=imp.split(/\s*,\s*/).shift();importName=importName.trim();importName=importName.replace(/^'|'$/g,"");importName=importName.replace(/^"|"$/g,"");self.resolve(importName,{basedir},function(err$jscomp$0,resolved){if(err$jscomp$0)return next(err$jscomp$0);if(cache[resolved])return dep.deps[importName]=cache[resolved].id,next();cache[resolved]=self.add(resolved,function(err){if(err)return next(err);dep.deps[importName]=
cache[resolved].id;next()})})},resolved$jscomp$0)}var basedir=path.dirname(filename=path.resolve(filename)),cache=this._cache,self=this,exports=[],imports=[],dep={id:this._i++,deps:{},file:filename,source:null,entry:1===this._i};this._deps.push(dep);this.readFile(filename,function(err$jscomp$2,src$jscomp$0){if(err$jscomp$2)return done(err$jscomp$2);self.getTransformsForFile(filename,function(err$jscomp$1,trs){if(err$jscomp$1)return done(err$jscomp$1);self.emit("file",filename);self.applyTransforms(filename,
src$jscomp$0,trs,function(err$jscomp$0,src){if(err$jscomp$0)return done(err$jscomp$0);dep.source=src;extractPreprocessors();resolveImports(function(err){setTimeout(function(){done&&done(err,!err&&self._deps)})})})})});return dep};Depper.prototype.readFile=function(filename,done){return path.basename(filename)!==inlineName?this._readFile(filename,done):done(null,inlineSource)};Depper.prototype.getTransformsForFile=function(filename,done){function register(transforms){done(null,trCache[fileDir]=trLocal.concat(transforms).concat(self._globalTransforms))}
var self=this,entry=this._deps[0];if(!entry)return done(Error("getTransformsForFile may only be called after adding your entry file"));entry=path.dirname(path.resolve(entry.file));var fileDir=path.dirname(path.resolve(filename)),trLocal=-1!==path.relative(entry,fileDir).split(path.sep).indexOf("node_modules")?[]:this._transforms,trCache=this._trCache;if(trCache[fileDir])return done(null,trCache[fileDir]);findup(fileDir,"package.json",function(err$jscomp$0,found){if(err$jscomp$0&&"not found"===err$jscomp$0.message)return register([]);
if(err$jscomp$0)return done(err$jscomp$0);err$jscomp$0=path.join(found,"package.json");self.readFile(err$jscomp$0,function(err,pkgjson){if(err)return done(err);try{pkgjson=JSON.parse(pkgjson)}catch(e){return done(e)}err=pkgjson.glslify&&pkgjson.glslify.transform||[];err=err.map(function(key){var transform=Array.isArray(key)?key:[key,{}];key=transform[0];if(transform=transform[1])delete transform.global,delete transform.post;return{tr:key,opts:transform,name:key}}).map(function(tr){tr.tr=self.resolveTransform(tr.tr);
return tr});register(err)})})};Depper.prototype.resolveTransform=function(transform){"string"===typeof transform&&(transform=nodeResolve.sync(transform,{basedir:this._cwd}),transform=require(transform));return transform};Depper.prototype.applyTransforms=function(filename,src,transforms,done){function next(err,updated){if(err)return done(err);if(i>=transforms.length)return done(null,updated);err=transforms[i++];err.tr(filename,updated+"",err.opts,next)}var i=0;next(null,src)}}
//# sourceMappingURL=module$node_modules$glslify_deps$index.js.map
