{
"version":3,
"file":"module$node_modules$soundfont_player$lib$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,8CAAf,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwC3GC,QAASA,WAAW,CAACC,EAAD,CAAKC,IAAL,CAAWC,OAAX,CAAoB,CACtC,GAAyB,CAAzB,GAAIC,SAAJ,CAAcC,MAAd,CAA4B,MAAO,SAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAAE,MAAOP,WAAA,CAAWC,EAAX,CAAeK,CAAf,CAAkBC,CAAlB,CAAT,CACnD,KAAIC,KAAOL,OAAPK,EAAkB,EAAtB,CAEIC,MAAQD,IAARC,CAAaC,SAAbD,EAA0BC,SAF9B,CAGIC,IAAM,CAFEH,IAEF,CAFOI,cAEP,EAFyBA,cAEzB,EAAMV,IAAN,CAAA,CAAcA,IAAd,CAAqBO,KAAA,CAAMP,IAAN,CAAYM,IAAZ,CAAiBK,SAAjB,CAA4BL,IAA5B,CAAiCM,MAAjC,CAE/B,OAAOC,KAAA,CAAKd,EAAL,CAASU,GAAT,CAAc,CAAEK,KAAMR,IAANQ,CAAWA,IAAXA,EAAmBR,IAAnBQ,CAAwBC,KAA1B,CAAd,CAAA,CAAiDC,IAAjD,CAAsD,QAAS,CAACC,OAAD,CAAU,CAC1EC,OAAAA,CAAIC,MAAA,CAAOpB,EAAP,CAAWkB,OAAX,CAAoBX,IAApB,CAAA,CAA0Bc,OAA1B,CAAkCd,IAAA,CAAKe,WAAL,CAAmBf,IAAnB,CAAwBe,WAAxB;AAAsCtB,EAAtC,CAAyCsB,WAA3E,CACRH,QAAA,CAAET,GAAF,CAAQA,GACRS,QAAA,CAAElB,IAAF,CAASA,IACT,OAAOkB,QAJuE,CAAzE,CAP+B,CAexCR,QAASA,eAAe,CAACV,IAAD,CAAO,CAC7B,MAAO,eAAA,CAAgBsB,IAAhB,CAAqBtB,IAArB,CADsB,CAiB/BQ,QAASA,UAAU,CAACR,IAAD,CAAOuB,EAAP,CAAWX,MAAX,CAAmB,CAGpC,MAAO,8CAAP,EADY,YAAPW,GAAAA,EAAAA,CAAsBA,EAAtBA,CAA2B,YAChC,EAA6D,GAA7D,CAAmEvB,IAAnE,CAA0E,GAA1E,EAFoB,KAAXY,GAAAA,MAAAA,CAAmBA,MAAnBA,CAA4B,KAErC,EAAyF,KAHrD,CArEtC,IAAIC,KAAOlB,OAAA,CAAQ,4CAAR,CAAX,CACIwB,OAASxB,OAAA,CAAQ,6CAAR,CA4ET6B,OAAAA,CAAY7B,OAAA,CAAQ,iDAAR,CAChB6B,OAAA,CAAU1B,UAAV;AAAuBA,UACvB0B,OAAA,CAAUhB,SAAV,CAAsBA,SAEA,SAAtB,GAAI,MAAOZ,OAAX,EAAkCA,MAAlC,CAAyCC,OAAzC,GAAkDD,MAAlD,CAAyDC,OAAzD,CAAmE2B,MAAnE,CACsB,YAAtB,GAAI,MAAOC,OAAX,GAAmCA,MAAnC,CAA0CD,SAA1C,CAAsDA,MAAtD,CArF2G;",
"sources":["node_modules/soundfont-player/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$soundfont_player$lib$index\"] = function(global,require,module,exports) {\n'use strict'\n\nvar load = require('audio-loader')\nvar player = require('sample-player')\n\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\nfunction instrument (ac, name, options) {\n  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }\n  var opts = options || {}\n  var isUrl = opts.isSoundfontURL || isSoundfontURL\n  var toUrl = opts.nameToUrl || nameToUrl\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)\n\n  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination)\n    p.url = url\n    p.name = name\n    return p\n  })\n}\n\nfunction isSoundfontURL (name) {\n  return /\\.js(\\?.*)?$/i.test(name)\n}\n\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\nfunction nameToUrl (name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3'\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'\n}\n\n// In the 1.0.0 release it will be:\n// var Soundfont = {}\nvar Soundfont = require('./legacy')\nSoundfont.instrument = instrument\nSoundfont.nameToUrl = nameToUrl\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n\n};"],
"names":["shadow$provide","global","require","module","exports","instrument","ac","name","options","arguments","length","n","o","opts","toUrl","nameToUrl","url","isSoundfontURL","soundfont","format","load","only","notes","then","buffers","p","player","connect","destination","test","sf","Soundfont","window"]
}
