{"version":3,"sources":["rum_workshop/core.cljs"],"mappings":"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","names":["rum-workshop.core/handlers","e","cljs.core.prn","rum-workshop.core/socket-uri","rum-workshop.core/?csrf-token","temp__5735__auto__","el","js/document","map__17490","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_","rum-workshop.core/chsk","rum-workshop.core/ch-chsk","rum-workshop.core/chsk-send!","rum-workshop.core/chsk-state","cljs.core/enable-console-print!","js/rum-workshop","js/rum-workshop.core","js/rum-workshop.core.app-state","rum-workshop.core/app-state","cljs.core.atom","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","rum-workshop.core/hello","text","cljs.core.into_array","iter__4529__auto__","s__17494","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__17496","cljs.core/chunk-buffer","i__17495","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__17493","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","rum-workshop.core/numbered-list","n","x","cljs.core.range","rum-workshop.core/comments","rum-workshop.core/add-comment","comment","cljs.core.swap_BANG_","cljs.core/conj","s__17502","b__17504","i__17503","attrs17500","cljs.core/map?","daiquiri.interpreter/attributes","daiquiri.interpreter/interpret","iter__17501","cljs.core/deref","rum-workshop.core/comment-list","rum-workshop.core/button","js/console.log","rum.core/build-defcs","rum-workshop.core/stateful-component","cljs.core.assoc","cljs.core.pr_str","_","rum-workshop.core/unmount-stateful-component","h","js/setTimeout","js/clearTimeout","rum-workshop.core/websocket-connected-component","rum-workshop.core/start","rum.core/mount","js/document.getElementById","rum-workshop.core/init","rum-workshop.core/stop","cljs.core/chunk-first"],"sourcesContent":["(ns rum-workshop.core\n  (:require [rum.core :as rum]\n            [taoensso.sente  :as sente :refer (cb-success?)]))\n\n(def handlers {:on-message (fn [e] (prn (.-data e)))\n               :on-open    #(prn \"Opening a new connection\")\n               :on-close   #(prn \"Closing a connection\")})\n\n(def socket-uri \"ws://localhost:8888/ws\")\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(let [{:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n       \"/ws\" ; Note the same path as before\n       ?csrf-token\n       {:type :auto ; e/o #{:auto :ajax :ws}\n       })]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state)   ; Watchable, read-only atom\n  )\n(enable-console-print!)\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(rum/defc hello [text]\n  [:pre.app \n   (str \"<em>\"text\"</em>\")])\n\n(rum/defc numbered-list [n]\n  (for [x (range 1 (inc n))]\n    [:div (str x)]))\n\n(def comments (atom []))\n\n(defn add-comment \n  [comment]\n  (swap! comments conj comment))\n\n(rum/defc comment-list []\n  (for [comment @comments]\n    [:li comment]))\n\n(rum/defc button []\n  [:button \n   {:on-click \n    (fn [e] \n      (add-comment \"hello\")\n      (js/console.log comments))}\n   \"click me\"])\n\n(rum/defcs stateful-component < \n  {:will-mount\n   (fn [state]\n     (assoc state ::handle @comments))\n   :render (fn [state] (pr-str state))\n   :did-mount (fn [state] \n                (pr-str state))  \n   :should-update (fn [state])\n   :will-unmount (fn [state])\n   }\n  [state _ _] \n  [:div.app (pr-str state)\n   (comment-list)\n   (button)\n   ])\n\n(rum/defcs unmount-stateful-component < \n  {:will-mount\n   (fn [state]\n     (let [h (js/setTimeout #(js/console.log \"x\") 10000)]       \n       (assoc state ::handle h)))   \n   :will-unmount (fn [state]\n                   (let [h (::handle state)]\n                     (js/clearTimeout h)))\n   :render (fn [state] (pr-str state))\n   :did-mount (fn [state] (pr-str state))  \n   :should-update (fn [state])   }\n  [state _ _] \n  [:div.app (pr-str state)\n   (comment-list)\n   (button)\n   ])\n\n(rum/defcs websocket-connected-component < \n  {:did-mount (fn [state])\n   \n   }\n  []\n  [:div \"\"])\n\n(defn start []\n  (rum/mount \n    [(hello \"Hello\")\n     (stateful-component 10)\n     (numbered-list 10)\n     (unmount-stateful-component)]\n    (js/document.getElementById \"app\")))\n\n(defn ^:export init []\n  (start))\n\n(defn stop []\n  (js/console.log \"stop\"))\n\n"]}