{"version":3,"sources":["rum_workshop/core.cljs"],"mappings":"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","names":["rum-workshop.core/handlers","e","cljs.core.prn","rum-workshop.core/socket-uri","rum-workshop.core/?csrf-token","temp__5735__auto__","el","js/document","map__34899","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_","rum-workshop.core/chsk","rum-workshop.core/ch-chsk","rum-workshop.core/chsk-send!","rum-workshop.core/chsk-state","cljs.core/enable-console-print!","js/rum-workshop","js/rum-workshop.core","js/rum-workshop.core.app-state","rum-workshop.core/app-state","cljs.core.atom","rum.core/build-defc","attrs34901","js/React.createElement","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","rum-workshop.core/hello","text","cljs.core.into_array","iter__4529__auto__","s__34904","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__34906","cljs.core/chunk-buffer","i__34905","cljs.core/-nth","cljs.core/chunk-append","attrs34902","cljs.core/chunk-cons","cljs.core/chunk","iter__34903","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","rum-workshop.core/numbered-list","n","x","cljs.core.range","rum-workshop.core/comments","rum-workshop.core/add-comment","comment","cljs.core.swap_BANG_","cljs.core/conj","s__34909","b__34911","i__34910","attrs34907","iter__34908","cljs.core/deref","rum-workshop.core/comment-list","rum-workshop.core/button","js/console.log","rum.core/build-defcs","attrs34912","rum-workshop.core/stateful-component","cljs.core.assoc","cljs.core.pr_str","_","attrs34913","rum-workshop.core/unmount-stateful-component","h","js/setTimeout","js/clearTimeout","rum-workshop.core/websocket-connected-component","rum-workshop.core/start","rum.core/mount","js/document.getElementById","rum-workshop.core/init","rum-workshop.core/stop","cljs.core/chunk-first"],"sourcesContent":["(ns rum-workshop.core\n  (:require [rum.core :as rum]\n            [taoensso.sente  :as sente :refer (cb-success?)]))\n\n(def handlers {:on-message (fn [e] (prn (.-data e)))\n               :on-open    #(prn \"Opening a new connection\")\n               :on-close   #(prn \"Closing a connection\")})\n\n(def socket-uri \"ws://localhost:8888/ws\")\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(let [{:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n       \"/ws\" ; Note the same path as before\n       ?csrf-token\n       {:type :auto ; e/o #{:auto :ajax :ws}\n       })]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state)   ; Watchable, read-only atom\n  )\n(enable-console-print!)\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(rum/defc hello [text]\n  [:pre.app \n   (str \"<em>\"text\"</em>\")])\n\n(rum/defc numbered-list [n]\n  (for [x (range 1 (inc n))]\n    [:div (str x)]))\n\n(def comments (atom []))\n\n(defn add-comment \n  [comment]\n  (swap! comments conj comment))\n\n(rum/defc comment-list []\n  (for [comment @comments]\n    [:li comment]))\n\n(rum/defc button []\n  [:button \n   {:on-click \n    (fn [e] \n      (add-comment \"hello\")\n      (js/console.log comments))}\n   \"click me\"])\n\n(rum/defcs stateful-component < \n  {:will-mount\n   (fn [state]\n     (assoc state ::handle @comments))\n   :render (fn [state] (pr-str state))\n   :did-mount (fn [state] \n                (pr-str state))  \n   :should-update (fn [state])\n   :will-unmount (fn [state])\n   }\n  [state _ _] \n  [:div.app (pr-str state)\n   (comment-list)\n   (button)\n   ])\n\n(rum/defcs unmount-stateful-component < \n  {:will-mount\n   (fn [state]\n     (let [h (js/setTimeout #(js/console.log \"x\") 10000)]       \n       (assoc state ::handle h)))   \n   :will-unmount (fn [state]\n                   (let [h (::handle state)]\n                     (js/clearTimeout h)))\n   :render (fn [state] (pr-str state))\n   :did-mount (fn [state] (pr-str state))  \n   :should-update (fn [state])   }\n  [state _ _] \n  [:div.app (pr-str state)\n   (comment-list)\n   (button)\n   ])\n\n(rum/defcs websocket-connected-component < \n  {:did-mount (fn [state])\n   \n   }\n  []\n  [:div \"\"])\n\n(defn start []\n  (rum/mount \n    [(hello \"Hello\")\n     (stateful-component 10)\n     (numbered-list 10)\n     (unmount-stateful-component)]\n    (js/document.getElementById \"app\")))\n\n(defn ^:export init []\n  (start))\n\n(defn stop []\n  (js/console.log \"stop\"))\n\n"]}