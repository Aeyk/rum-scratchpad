{"version":3,"sources":["leipzig/temperament.cljc"],"mappings":"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","names":["p1__27553#","p2__27554#","leipzig.temperament/pow","js/Math","leipzig.temperament/pythagorean-comma","leipzig.temperament/align-concert-a","tuning","midi","leipzig.temperament/temper","ratios","G__27572","G__27573","G__27575","G__27576","cljs.core.nth","leipzig.temperament/tune","root","incremental-ratios","geometric-progression","cljs.core.partial","cljs.core/reductions","cljs.core/*","cljs.core.map","ratio","normalise","cljs.core.sort","leipzig.temperament/equal","cljs.core.repeat","leipzig.temperament/pythagorean","pure","wolf","fifths","cljs.core.mapcat","cljs.core/repeat","leipzig.temperament/five-limit-just","leipzig.temperament/seven-limit-just","leipzig.temperament/just","leipzig.temperament/meantone","narrow","leipzig.temperament/werckmeister-i","leipzig.temperament/werckmeister-ii","wide","leipzig.temperament/werckmeister-iii","leipzig.temperament/well"],"sourcesContent":["(ns leipzig.temperament)\n\n(def pow #?(:clj #(java.lang.Math/pow %1 %2)\n            :cljs #(.pow js/Math %1 %2)))\n\n(def pythagorean-comma\n  \"The difference between an octave constructed out of pure fifths, and one constructed\n  from a pure 2/1 ratio.\"\n  (/ 531441 524288))\n\n(defn- align-concert-a [tuning] (fn [midi] (-> midi tuning (* (/ 440 (tuning 69))))))\n(defn- temper [midi ratios]\n  (cond\n    (< midi 0) (* (/ 1 2) (temper (+ midi 12) ratios))\n    (> midi 11) (* 2 (temper (- midi 12) ratios))\n    :otherwise (nth ratios midi)))\n\n(defn- tune\n  [root incremental-ratios]\n  (let [geometric-progression (partial reductions * 1)\n        ratios (->>\n                 (geometric-progression incremental-ratios)\n                 (map (fn normalise [ratio] (if (< ratio 2) ratio (normalise (/ ratio 2)))))\n                 sort)\n        tuning (fn [midi] (-> midi (- root) (temper ratios)))]\n    (align-concert-a tuning)))\n\n(def equal\n  \"Converts midi to hertz using equal temperament.\n  e.g. (equal 69)\"\n  (tune 69 (repeat 11 (pow 2 (/ 1 12)))))\n\n(defn pythagorean\n  \"Returns a function that converts midi to hertz using Pythagorean temperament, measuring\n  ratios relative to root. The wolf tone is the fifth from one midi above root.\n  e.g. ((pythagorean 61) 69)\"\n  [root]\n  (let [pure (/ 3 2)\n        wolf (/ pure pythagorean-comma)\n        fifths (mapcat repeat [7 1 3] [pure wolf pure])]\n    (tune root fifths)))\n\n(defn five-limit-just [root]\n  \"Returns a function that converts midi to hertz using just intonation, measuring ratios\n  relative to root. Specifically, this is a five-limit asymmetric just intonation, with\n  a wolf tone from the major second to the fourth.\n  e.g. ((five-limit-just 61) 69)\"\n  (align-concert-a\n    (fn [midi]\n      (temper (- midi root) [(/ 1 1) (/ 135 128) (/ 9 8) (/ 6 5) (/ 5 4) (/ 4 3) (/ 45 32) (/ 3 2) (/ 8 5) (/ 27 16) (/ 9 5) (/ 15 8)]))))\n\n(defn seven-limit-just [root]\n  \"Returns a function that converts midi to hertz using just intonation, measuring ratios\n  relative to root. Specifically, this is a seven-limit just intonation, with a wolf tone\n  from the major second to the fourth.\n  e.g. ((seven-limit-just 61) 69)\"\n  (align-concert-a\n    (fn [midi]\n      (temper (- midi root) [(/ 1 1) (/ 135 128) (/ 8 7) (/ 6 5) (/ 5 4) (/ 4 3) (/ 7 5) (/ 3 2) (/ 8 5) (/ 27 16) (/ 7 4) (/ 15 8)]))))\n\n(def just\n  \"Returns a function that converts midi to hertz using just intonation, measuring ratios\n  relative to root. See five-limit-just.\n  e.g. ((just 61) 69)\"\n  five-limit-just)\n\n(defn meantone\n  \"Returns a function that converts midi to hertz using quarter-comma meantone tuning,\n  measuring ratios relative to root. The major third is a pure 5/4 ratio, but there are\n  many wolf tones.\n  e.g. ((meantone 61) 69)\"\n  [root]\n  (let [narrow (pow 5 (/ 1 4))\n        wolf (* narrow (/ 128 125))\n        fifths (mapcat repeat [7 1 3] [narrow wolf narrow])]\n    (tune root fifths)))\n\n(defn werckmeister-i\n  \"Returns a function that converts midi to hertz using Werckmeister's well-temperament\n  based on 1/4 comma divisions (Werkmeister I). Ratios are relative to root.\n  e.g. ((werckmeister-i 61) 69)\"\n  [root]\n  (let [pure (/ 3 2)\n        narrow (/ pure (pow pythagorean-comma (/ 1 4)))\n        fifths [narrow narrow narrow pure pure narrow pure pure pure pure pure]]\n    (tune root fifths)))\n\n(defn werckmeister-ii\n  \"Returns a function that converts midi to hertz using Werckmeister's well-temperament\n  based on 1/3 comma divisions (Werckmeister II). Ratios are relative to root.\n  e.g. ((werckmeister-ii 61) 69)\"\n  [root]\n  (let [pure (/ 3 2)\n        narrow (/ pure (pow pythagorean-comma (/ 1 3)))\n        wide (* pure (pow pythagorean-comma (/ 1 3)))\n        fifths [narrow pure narrow pure narrow pure narrow pure wide wide narrow]]\n    (tune root fifths)))\n\n(defn werckmeister-iii\n  \"Returns a function that converts midi to hertz using Werckmeister's well-temperament\n  based on 1/4 comma divisions (Werckmeister III). Ratios are relative to root.\n  e.g. ((werckmeister-iii 61) 69)\"\n  [root]\n   (let [pure (/ 3 2)\n         narrow (/ pure (pow pythagorean-comma (/ 1 4)))\n         wide (* pure (pow pythagorean-comma (/ 1 4)))\n         fifths [pure pure narrow narrow pure pure narrow narrow wide pure pure]]\n     (tune root fifths)))\n\n(def well\n  \"Returns a function that converts midi to hertz using Werckmeister I well-temperament.\n  See werckmeister-i.\n  e.g. ((well 61) 69)\"\n  werckmeister-i)\n"]}