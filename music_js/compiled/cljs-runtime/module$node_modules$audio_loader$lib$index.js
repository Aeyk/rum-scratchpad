shadow$provide.module$node_modules$audio_loader$lib$index=function(global,require,module,exports){function fromRegex(r){return function(o){return"string"===typeof o&&r.test(o)}}function prefix(pre,name){return"string"===typeof pre?pre+name:"function"===typeof pre?pre(name):name}function load(ac,source,options,defVal){var loader=source instanceof ArrayBuffer?loadArrayBuffer:isAudioFileName(source)?loadAudioFile:source&&"function"===typeof source.then?loadPromise:isArray(source)?loadArrayData:source&&
"object"===typeof source?loadObjectData:isJsonFileName(source)?loadJsonFile:isBase64Audio(source)?loadBase64Audio:isJsFileName(source)?loadMidiJSFile:null;options=options||{};return loader?loader(ac,source,options):defVal?Promise.resolve(defVal):Promise.reject("Source not valid ("+source+")")}function loadArrayBuffer(ac,array,options){return new Promise(function(done,reject){ac.decodeAudioData(array,function(buffer){done(buffer)},function(){reject("Can't decode audio data ("+array.slice(0,30)+"...)")})})}
function loadAudioFile(ac,name,options){name=prefix(options.from,name);return load(ac,load.fetch(name,"arraybuffer"),options)}function loadPromise(ac,promise,options){return promise.then(function(value){return load(ac,value,options)})}function loadArrayData(ac,array,options){return Promise.all(array.map(function(data){return load(ac,data,options,data)}))}function loadObjectData(ac,obj,options){var dest={},promises=Object.keys(obj).map(function(key){if(options.only&&-1===options.only.indexOf(key))return null;
var value=obj[key];return load(ac,value,options,value).then(function(audio){dest[key]=audio})});return Promise.all(promises).then(function(){return dest})}function loadJsonFile(ac,name,options){name=prefix(options.from,name);return load(ac,load.fetch(name,"text").then(JSON.parse),options)}function loadBase64Audio(ac,source,options){var i=source.indexOf(",");return load(ac,base64.decode(source.slice(i+1)).buffer,options)}function loadMidiJSFile(ac,name,options){name=prefix(options.from,name);return load(ac,
load.fetch(name,"text").then(midiJsToJson),options)}function midiJsToJson(data){var begin=data.indexOf("MIDI.Soundfont.");if(0>begin)throw Error("Invalid MIDI.js Soundfont format");begin=data.indexOf("\x3d",begin)+2;var end=data.lastIndexOf(",");return JSON.parse(data.slice(begin,end)+"}")}var base64=require("module$node_modules$audio_loader$lib$base64");global=require("module$node_modules$audio_loader$lib$fetch");load.fetch=global;var isAudioFileName=fromRegex(/\.(mp3|wav|ogg)(\?.*)?$/i),isArray=
Array.isArray,isJsonFileName=fromRegex(/\.json(\?.*)?$/i),isBase64Audio=fromRegex(/^data:audio/),isJsFileName=fromRegex(/\.js(\?.*)?$/i);"object"===typeof module&&module.exports&&(module.exports=load);"undefined"!==typeof window&&(window.loadAudio=load)}
//# sourceMappingURL=module$node_modules$audio_loader$lib$index.js.map
