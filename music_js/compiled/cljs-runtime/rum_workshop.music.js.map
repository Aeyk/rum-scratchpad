{"version":3,"sources":["rum_workshop/music.cljs"],"mappings":";;AAKA,AAACA;AAED,AAAKC,AAAa,AAAA,AAAiBC;AAEnC,AAAKC,AAAO,AAAA,AAAKC,AAAeC;AAEhC,AAAA,AAAMC;AAAN,AACE;AAAKC,AAAU,AAAgBJ;;;AAEjC,AAAA,AAAMK,AAAWC,AAAMC;AAAvB,AACE,AACEH,AACAE,AAAMC;;AAEV,AAAA,AAAMC,AAASC;AAAf,AACI,AAAM,AAAA,AAAIC,AAA4BD;;AAE1C,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC,AAACC,AAAKC,AAAMC;;AAWf,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAM,AAACL;AAAb,AACE,AAAA,AAACN,AACCW;;AAEF,AAACC,AAAeD;;AAEpB,AAAKE,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAMH,AAAA,AAAMC;AAAN,AACE,AAAMF,AACJ,AAACG,AAAK,AAAA,AAAAC,AAACC,AAAML,AAAkB,AAAA,AAAAI,AAACT,AAAOK;;AACzCA;;AAEF,AAAKM,AAAO,AAACZ,AAAKC,AAAMC;AAExB,AAAA,AAAMW,AAAWnB,AAAMoB;AAAvB,AACE,AAACC,AAAMC,AACL,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAQE;AAAAA,AACN,AAAAC,AAAYD;AADd,AAEE,AAAYA,AAAGL;AACrBpB;;AAEN,AAAA,AAAM2B;AAAN,AACE,AAAA,AAACzB;;AACD,AAAQE;;AAGV,AAAA,AAAMwB;AAAN,AACE,AAAKC,AAAE,AAAA,AAAChB;;AAER,AAAA,AAAA,AAAA,AAACiB;AAAD,AACG,AACE,AAAA,AAACC,AAAMF,AAAEG;;AACV,AAAA,AAAAhB,AAACL,AAAgBkB;;;AAGrB,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AACE,AAAA,AAACC,AAAMF,AAAEI;;AACV,AAAA,AAAAjB,AAACL,AAAgBkB;;;AAGrB,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC/B,AACC,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAiC,AAAA,AAAA,AAAAH,AAAMa;;;AAE7C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAgC,AAAA,AAAA,AAAAH,AAAMa;;;AAE3C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAgC,AAAA,AAAA,AAAAH,AAAMa;;;AAG3C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC/B,AACC,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAgC,AAAA,AAAA,AAAAH,AAAMa;;;AAE5C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAA+B,AAAA,AAAA,AAAAH,AAAMa;;;AAE1C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAA+B,AAAA,AAAA,AAAAH,AAAMa;;;AAG1C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAA+B,AAAA,AAAA,AAAAH,AAAMa;;;AAG1C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAA+B,AAAA,AAAA,AAAAH,AAAMa;;;AAE1C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAAA,AAAA,AAAA,AAAA,AAACoB,AAA+B,AAAA,AAAA,AAAAH,AAAMa;;;AAG1C,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA6B,AAAA,AAAA,AAAAS,AAAOa;;;AAE3D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA8B,AAAA,AAAA,AAAAS,AAAOa;;;AAE5D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA8B,AAAA,AAAA,AAAAS,AAAOa;;;AAG5D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC/B,AACC,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAAgC,AAAA,AAAA,AAAAS,AAAOa;;;AAE/D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA8B,AAAA,AAAA,AAAAS,AAAOa;;;AAE5D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA8B,AAAA,AAAA,AAAAS,AAAOa;;;AAG5D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC/B,AACC,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA0B,AAAA,AAAA,AAAAS,AAAOa;;;AAEzD,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA6B,AAAA,AAAA,AAAAS,AAAMa;;;AAE1D,AAAA,AAAA,AAAA,AAACC;AAAD,AACG,AAAA,AAAC,AAACxB,AAAKK,AAAeZ,AACrB,AAACoB,AAAU,AAAO,AAAA,AAAA,AAAA,AAAA,AAACZ,AAA6B,AAAA,AAAA,AAAAS,AAAMa;;;AAS5D,AAAA,AAAAK,AAAAC,AAAA,AAAUE;AAAV,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAEG,AAAKE;AAAL,AACE,AAACzC;;AACD,AAAC+B;;AACD,AAACD;AALN;AAcA,AAAA,AAAMY;AAAN,AACE,AAACC,AACC,AAACH,AAAK7C;;AAEV,AAAA,AAAeiD;AAAf,AACE,AAACF","names":["cljs.core/enable-console-print!","rum-workshop.music/root-element","js/document","rum-workshop.music/psynth","js/module$node_modules$tone$build$Tone.PolySynth","js/module$node_modules$tone$build$Tone.Synth","rum-workshop.music/init-psynth","rum-workshop.music/audio-out","rum-workshop.music/play-note","notes","duration","rum-workshop.music/set-bpm","bpm","js/module$node_modules$tone$build$Tone.Transport","rum-workshop.music/random-chord","cljs.core.comp","cljs.core/first","cljs.core/shuffle","rum-workshop.music/play-random-chord","chord","js/console.log","rum-workshop.music/four-random-loop","cljs.core.atom","rum-workshop.music/cycle-chords-loop","cljs.core.conj","cljs.core/deref","cljs.core/rest","rum-workshop.music/sample","rum-workshop.music/transpose","delta","cljs.core.apply","cljs.core/array","p1__30003#","cljs.core.map","$$","js/module$node_modules$tone$build$Tone.Midi","rum-workshop.music/init-clock","rum-workshop.music/init-keybinding","rum-workshop.music/s","keybind.core/bind!","cljs.core.swap_BANG_","cljs.core/+","cljs.core/-","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","rum-workshop.music/app","e","rum-workshop.music/refresh","rum.core/mount","rum-workshop.music/init"],"sourcesContent":["(ns rum-workshop.music\n  (:require [rum.core :as rum :refer [adapt-class]]\n            [keybind.core :as key]\n            [\"tone\" :as tone]))\n\n(enable-console-print!)\n\n(def root-element (.getElementById js/document \"app\"))\n\n(def psynth (new tone/PolySynth tone/Synth 6))\n\n(defn init-psynth []\n  (def audio-out (.toDestination psynth)))\n\n(defn play-note [notes duration]\n  (.triggerAttackRelease \n    audio-out\n    notes duration))\n\n(defn set-bpm [bpm]\n    (set! (.. tone/Transport -bpm -value) bpm))\n\n(defn random-chord []\n  ((comp first shuffle) \n   [#js [\"C4\" \"E4\" \"G4\"]\n    #js [\"D4\" \"B4\" \"G4\"]\n    #js [\"D4\" \"F#4\" \"A4\"]         \n    #js [\"G4\" \"B4\" \"D4\"]\n    #js [\"D4\" \"F#4\" \"A4\"]\n    #js [\"C4\" \"E4\" \"G4\"]\n    #js [\"C4\" \"E4\" \"G4\"]\n    #js [\"Bb4\" \"D4\" \"F4\"]\n    #js [\"F4\" \"A4\" \"C4\"]]))\n\n(defn play-random-chord []\n  (let [chord (random-chord)]\n    (play-note \n      chord\n      \"16n\")\n    (js/console.log chord)))\n\n(def four-random-loop\n  (atom \n    #js [#js [\"D4\" \"F#4\" \"A4\"]\n         #js [\"C4\" \"E4\" \"G4\"]\n         #js [\"G4\" \"B4\" \"D4\"]\n         #js [\"C4\" \"E4\" \"G4\"]]))\n\n(defn cycle-chords-loop []\n  (set! four-random-loop \n    (conj (rest @four-random-loop) (first @four-random-loop)))\n  four-random-loop)\n\n(def sample (comp first shuffle))\n\n(defn transpose [notes delta]\n  (apply array \n    (map #(as-> % $$ \n            (tone/Midi. $$) \n            (.transpose $$ delta))\n      notes)))\n\n(defn init-clock []\n  (set-bpm 200)\n  (.start tone/Transport))\n\n\n(defn init-keybinding []\n  (def s (atom 0)) \n\n  (key/bind! \"f\" ::my-trigger \n    #(do \n       (swap! s + 7)\n      (js/console.log @s)))\n\n\n  (key/bind! \"g\" ::my-trigger \n    #(do \n       (swap! s - 5)\n      (js/console.log @s)))\n\n\n  (key/bind! \"q\" ::my-trigger \n    #(play-note\n       (transpose #js [\"D4\" \"F#4\" \"A4\"]  (+ 0 @s))\n       \"16n\"))\n  (key/bind! \"w\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"D4\" \"F#4\" \"A4\"] (+ 5 @s))\n      \"16n\"))\n  (key/bind! \"e\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"D4\" \"F#4\" \"A4\"] (+ 7 @s))\n      \"16n\"))\n\n  (key/bind! \"c\" ::my-trigger \n    #(play-note\n       (transpose #js [\"C4\" \"E4\" \"G4\"]  (+ 0 @s))\n       \"16n\"))\n  (key/bind! \"x\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"C4\" \"E4\" \"G4\"] (+ 5 @s))\n      \"16n\"))\n  (key/bind! \"z\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"C4\" \"E4\" \"G4\"] (+ 7 @s))\n      \"16n\"))\n\n  (key/bind! \"a\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"E4\" \"B4\" \"G4\"] (+ 2 @s))\n      \"16n\"))\n\n  (key/bind! \"s\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"E4\" \"G4\" \"B4\"] (+ 3 @s))\n      \"16n\"))\n  (key/bind! \"d\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose #js [\"E4\" \"G4\" \"B4\"] (+ 4 @s))\n      \"16n\"))\n\n  (key/bind! \"h\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first #js [\"E4\" \"B4\" \"G4\"])) (+ 14 @s))\n      \"16n\"))\n  (key/bind! \"j\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first  #js [\"E4\" \"B4\" \"G4\"])) (+ 15 @s))\n      \"16n\"))\n  (key/bind! \"k\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first  #js [\"E4\" \"B4\" \"G4\"])) (+ 16 @s))\n      \"16n\"))\n\n  (key/bind! \"y\" ::my-trigger \n    #(play-note\n       (transpose (array (first  #js [\"D4\" \"F#4\" \"A4\"]))  (+ 12 @s))\n       \"16n\"))\n  (key/bind! \"u\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first #js [\"D4\" \"F#4\" \"A4\"])) (+ 17 @s))\n      \"16n\"))\n  (key/bind! \"i\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first #js [\"D4\" \"F#4\" \"A4\"])) (+ 19 @s))\n      \"16n\"))\n\n  (key/bind! \"n\" ::my-trigger \n    #(play-note\n       (transpose (array (first [\"C4\" \"E4\" \"G4\"]))  (+ 12 @s))\n       \"16n\"))\n  (key/bind! \"m\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first #js [\"C4\" \"E4\" \"G4\"])) (+ 7 @s))\n      \"16n\"))\n  (key/bind! \",\" ::my-trigger \n    #((comp js/console.log play-note) \n      (transpose (array (first #js [\"C4\" \"E4\" \"G4\"])) (+ 9 @s))\n      \"16n\"))\n  \n  \n\n  \n  )\n\n\n(rum/defc app < \n  {:did-mount \n   (fn [e]\n     (init-psynth)\n     (init-keybinding)\n     (init-clock))}\n  []\n  [:div \n   [:pre \"QWE ASD ZXC for chords\"] \n   [:pre \"YUI HJK NM, for melody\"]\n   [:pre \"F G for transpose\"]\n   \n   ] )\n\n(defn refresh [] \n  (rum/mount \n    (app) root-element))\n\n(defn ^:export init []\n  (refresh))\n"]}