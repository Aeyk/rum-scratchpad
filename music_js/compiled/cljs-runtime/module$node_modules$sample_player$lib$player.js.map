{
"version":3,
"file":"module$node_modules$sample_player$lib$player.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/sample-player/lib/player.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$sample_player$lib$player\"] = function(global,require,module,exports) {\n/* global AudioBuffer */\n'use strict'\n\nvar ADSR = require('adsr')\n\nvar EMPTY = {}\nvar DEFAULTS = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.9,\n  release: 0.3,\n  loop: false,\n  cents: 0,\n  loopStart: 0,\n  loopEnd: 0\n}\n\n/**\n * Create a sample player.\n *\n * @param {AudioContext} ac - the audio context\n * @param {ArrayBuffer|Object<String,ArrayBuffer>} source\n * @param {Onject} options - (Optional) an options object\n * @return {player} the player\n * @example\n * var SamplePlayer = require('sample-player')\n * var ac = new AudioContext()\n * var snare = SamplePlayer(ac, <AudioBuffer>)\n * snare.play()\n */\nfunction SamplePlayer (ac, source, options) {\n  var connected = false\n  var nextId = 0\n  var tracked = {}\n  var out = ac.createGain()\n  out.gain.value = 1\n\n  var opts = Object.assign({}, DEFAULTS, options)\n\n  /**\n   * @namespace\n   */\n  var player = { context: ac, out: out, opts: opts }\n  if (source instanceof AudioBuffer) player.buffer = source\n  else player.buffers = source\n\n  /**\n   * Start a sample buffer.\n   *\n   * The returned object has a function `stop(when)` to stop the sound.\n   *\n   * @param {String} name - the name of the buffer. If the source of the\n   * SamplePlayer is one sample buffer, this parameter is not required\n   * @param {Float} when - (Optional) when to start (current time if by default)\n   * @param {Object} options - additional sample playing options\n   * @return {AudioNode} an audio node with a `stop` function\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   * sample.start()\n   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer\n   * @example\n   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)\n   * drums.start('snare')\n   * drums.start('snare', 0, { gain: 0.3 })\n   */\n  player.start = function (name, when, options) {\n    // if only one buffer, reorder arguments\n    if (player.buffer && name !== null) return player.start(null, name, when)\n\n    var buffer = name ? player.buffers[name] : player.buffer\n    if (!buffer) {\n      console.warn('Buffer ' + name + ' not found.')\n      return\n    } else if (!connected) {\n      console.warn('SamplePlayer not connected to any node.')\n      return\n    }\n\n    var opts = options || EMPTY\n    when = Math.max(ac.currentTime, when || 0)\n    player.emit('start', when, name, opts)\n    var node = createNode(name, buffer, opts)\n    node.id = track(name, node)\n    node.env.start(when)\n    node.source.start(when)\n    player.emit('started', when, node.id, node)\n    if (opts.duration) node.stop(when + opts.duration)\n    return node\n  }\n\n  // NOTE: start will be override so we can't copy the function reference\n  // this is obviously not a good design, so this code will be gone soon.\n  /**\n   * An alias for `player.start`\n   * @see player.start\n   * @since 0.3.0\n   */\n  player.play = function (name, when, options) {\n    return player.start(name, when, options)\n  }\n\n  /**\n   * Stop some or all samples\n   *\n   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime\n   * if not specified)\n   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop\n   * @return {Array} an array of ids of the stoped samples\n   *\n   * @example\n   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)\n   * longSound.start(ac.currentTime)\n   * longSound.start(ac.currentTime + 1)\n   * longSound.start(ac.currentTime + 2)\n   * longSound.stop(ac.currentTime + 3) // stop the three sounds\n   */\n  player.stop = function (when, ids) {\n    var node\n    ids = ids || Object.keys(tracked)\n    return ids.map(function (id) {\n      node = tracked[id]\n      if (!node) return null\n      node.stop(when)\n      return node.id\n    })\n  }\n  /**\n   * Connect the player to a destination node\n   *\n   * @param {AudioNode} destination - the destination node\n   * @return {AudioPlayer} the player\n   * @chainable\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   */\n  player.connect = function (dest) {\n    connected = true\n    out.connect(dest)\n    return player\n  }\n\n  player.emit = function (event, when, obj, opts) {\n    if (player.onevent) player.onevent(event, when, obj, opts)\n    var fn = player['on' + event]\n    if (fn) fn(when, obj, opts)\n  }\n\n  return player\n\n  // =============== PRIVATE FUNCTIONS ============== //\n\n  function track (name, node) {\n    node.id = nextId++\n    tracked[node.id] = node\n    node.source.onended = function () {\n      var now = ac.currentTime\n      node.source.disconnect()\n      node.env.disconnect()\n      node.disconnect()\n      player.emit('ended', now, node.id, node)\n    }\n    return node.id\n  }\n\n  function createNode (name, buffer, options) {\n    var node = ac.createGain()\n    node.gain.value = 0 // the envelope will control the gain\n    node.connect(out)\n\n    node.env = envelope(ac, options, opts)\n    node.env.connect(node.gain)\n\n    node.source = ac.createBufferSource()\n    node.source.buffer = buffer\n    node.source.connect(node)\n    node.source.loop = options.loop || opts.loop\n    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)\n    node.source.loopStart = options.loopStart || opts.loopStart\n    node.source.loopEnd = options.loopEnd || opts.loopEnd\n    node.stop = function (when) {\n      var time = when || ac.currentTime\n      player.emit('stop', time, name)\n      var stopAt = node.env.stop(time)\n      node.source.stop(stopAt)\n    }\n    return node\n  }\n}\n\nfunction isNum (x) { return typeof x === 'number' }\nvar PARAMS = ['attack', 'decay', 'sustain', 'release']\nfunction envelope (ac, options, opts) {\n  var env = ADSR(ac)\n  var adsr = options.adsr || opts.adsr\n  PARAMS.forEach(function (name, i) {\n    if (adsr) env[name] = adsr[i]\n    else env[name] = options[name] || opts[name]\n  })\n  env.value.value = isNum(options.gain) ? options.gain\n    : isNum(opts.gain) ? opts.gain : 1\n  return env\n}\n\n/*\n * Get playback rate for a given pitch change (in cents)\n * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):\n * f2 = f1 * 2^( C / 1200 )\n */\nfunction centsToRate (cents) { return cents ? Math.pow(2, cents / 1200) : 1 }\n\nmodule.exports = SamplePlayer\n\n};"],
"names":["shadow$provide","global","require","module","exports","envelope","ac","options","opts","env","ADSR","adsr","PARAMS","forEach","name","i","value","gain","centsToRate","cents","Math","pow","EMPTY","DEFAULTS","attack","decay","sustain","release","loop","loopStart","loopEnd","SamplePlayer","source","track","node","id","nextId","tracked","onended","node.source.onended","now","currentTime","disconnect","player","emit","createNode","buffer","createGain","connect","out","createBufferSource","playbackRate","stop","node.stop","when","time","stopAt","connected","Object","assign","context","AudioBuffer","buffers","start","player.start","max","duration","console","warn","play","player.play","player.stop","ids","keys","map","player.connect","dest","player.emit","event","obj","onevent","fn"]
}
