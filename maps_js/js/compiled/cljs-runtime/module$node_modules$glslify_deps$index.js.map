{
"version":3,
"file":"module$node_modules$glslify_deps$index.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/glslify-deps/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$glslify_deps$index\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar tokenize = require('glsl-tokenizer/string')\nvar findup   = require('@choojs/findup')\nvar fs       = require('graceful-fs')\nvar map      = require('map-limit')\nvar inherits = require('inherits')\nvar Emitter  = require('events/')\nvar path     = require('path')\n\nvar glslResolve = require('glsl-resolve')\nvar nodeResolve = require('resolve')\n\nvar inlineName   = '__INLINE__' + Math.random()\nvar inlineSource = ''\n\nmodule.exports = Depper\n\n/**\n * Creates a new instance of glslify-deps. Generally, you'll\n * want to use one instance per bundle.\n *\n * @class\n * @param {String} cwd The root directory of your shader. Defaults to process.cwd()\n */\ninherits(Depper, Emitter)\nfunction Depper(opts) {\n  if (!(this instanceof Depper)) return new Depper(opts)\n  Emitter.call(this)\n\n  opts = typeof opts === 'string' ? { cwd: opts } : opts\n  opts = opts || {}\n\n  this._deps       = []\n  this._cwd        = opts.cwd || process.cwd()\n  this._cache      = {}\n  this._i          = 0\n  this._transforms = []\n  this._trCache    = {}\n  this._fileCache  = opts.files || {}\n\n  this._globalTransforms = []\n\n  this._readFile = cacheWrap(opts.readFile || defaultRead, this._fileCache)\n  this.resolve   = opts.resolve || glslResolve\n\n  if (typeof this._cwd !== 'string') {\n    throw new Error('glslify-deps: cwd must be a string path')\n  }\n}\n\nDepper.prototype.inline = function(source, basedir, done) {\n  var inlineFile = path.resolve(basedir || process.cwd(), inlineName)\n\n  inlineSource = source\n\n  this.add(inlineFile, function(err, tree) {\n    done && done(err, !err && tree)\n  })\n}\n\n/**\n * Adds a transform to use on your local dependencies.\n * Note that this should be used before calling `add`.\n *\n * Transforms are handled using a different API to browserify, e.g.:\n *\n * ``` js\n * module.exports = function transform(filename, src, opts, done) {\n *   done(null, src.toUpperCase())\n * }\n * ```\n *\n * Where `filename` is the absolute file path, `src` is the shader source\n * as a string, `opts` is an options object for configuration, and `done`\n * is a callback which takes the transformed shader source.\n *\n * @param {String|Function} transform\n * @param {Object} opts\n */\nDepper.prototype.transform = function(transform, opts) {\n  var name = typeof transform === 'string' ? transform : null\n  var list = opts && opts.global\n    ? this._globalTransforms\n    : this._transforms\n\n  // post transforms are ignored by glslify-deps, to be handled\n  // by glslify after the file has been bundled.\n  if (opts && opts.post) return this\n\n  transform = this.resolveTransform(transform)\n  list.push({ tr: transform, opts: opts, name: name })\n\n  return this\n}\n\n/**\n * Adds a shader file to the graph, including its dependencies\n * which are resolved in this step. Transforms are also applied\n * in the process too, as they may potentially add or remove dependent\n * modules.\n *\n * @param {String} filename The absolute path of this file.\n * @param {String} src The shader source for this file.\n * @param {Function} done(err, deps)\n *\n * The `done` callback will be called when the entire graph has been\n * resolved, and will include an array of dependencies discovered\n * so far as its second argument.\n */\nDepper.prototype.add = function(filename, done) {\n  var basedir = path.dirname(filename = path.resolve(filename))\n  var cache   = this._cache\n  var self    = this\n  var exports = []\n  var imports = []\n\n  var dep = {\n      id: this._i++\n    , deps: {}\n    , file: filename\n    , source: null\n    , entry: this._i === 1\n  }\n\n  this._deps.push(dep)\n  this.readFile(filename, function(err, src) {\n    if (err) return done(err)\n\n    self.getTransformsForFile(filename, function(err, trs) {\n      if (err) return done(err)\n\n      self.emit('file', filename)\n      self.applyTransforms(filename, src, trs, function(err, src) {\n        if (err) return done(err)\n\n        dep.source = src\n        extractPreprocessors()\n        resolveImports(function(err) {\n          setTimeout(function() {\n            done && done(err, !err && self._deps)\n          })\n        })\n      })\n    })\n  })\n\n  return dep\n\n  function extractPreprocessors() {\n    var tokens = tokenize(dep.source)\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n      if (token.type !== 'preprocessor') continue\n\n      var data = token.data\n      if (!glslifyPreprocessor(data)) continue\n\n      var exp = glslifyExport(data)\n      var imp = glslifyImport(data)\n      if (exp) exports.push(exp[1])\n      if (imp) imports.push(imp[2])\n    }\n  }\n\n  function resolveImports(resolved) {\n    map(imports, 10, function(imp, next) {\n      var importName = imp.split(/\\s*,\\s*/).shift()\n\n      importName = importName.trim()\n      importName = importName.replace(/^'|'$/g, '')\n      importName = importName.replace(/^\"|\"$/g, '')\n\n      self.resolve(importName, { basedir: basedir }, function(err, resolved) {\n        if (err) return next(err)\n\n        if (cache[resolved]) {\n          dep.deps[importName] = cache[resolved].id\n          return next()\n        }\n\n        cache[resolved] = self.add(resolved, function(err) {\n          if (err) return next(err)\n          dep.deps[importName] = cache[resolved].id\n          next()\n        })\n      })\n    }, resolved)\n  }\n}\n\nDepper.prototype.readFile = function(filename, done) {\n  if (path.basename(filename) !== inlineName)\n    return this._readFile(filename, done)\n\n  return done(null, inlineSource)\n}\n\n/**\n * Determines which transforms to use for a particular file.\n * The rules here are the same you see in browserify:\n *\n * - your shader files will have your specified transforms applied to them\n * - shader files in node_modules do not get local transforms\n * - all files will apply transforms specified in `glslify.transform` in your\n *   `package.json` file, albeit after any transforms you specified using\n *   `depper.transform`.\n *\n * @param {String} filename The absolute path of the file in question.\n */\nDepper.prototype.getTransformsForFile = function(filename, done) {\n  var self  = this\n  var entry = this._deps[0]\n\n  if (!entry) return done(new Error(\n    'getTransformsForFile may only be called after adding your entry file'\n  ))\n\n  var entryDir     = path.dirname(path.resolve(entry.file))\n  var fileDir      = path.dirname(path.resolve(filename))\n  var relative     = path.relative(entryDir, fileDir).split(path.sep)\n  var node_modules = relative.indexOf('node_modules') !== -1\n  var trLocal      = node_modules ? [] : this._transforms\n  var trCache      = this._trCache\n\n  if (trCache[fileDir]) {\n    return done(null, trCache[fileDir])\n  }\n\n  findup(fileDir, 'package.json', function(err, found) {\n    var notFound = err && err.message === 'not found'\n    if (notFound) return register([])\n    if (err) return done(err)\n\n    var pkg = path.join(found, 'package.json')\n\n    self.readFile(pkg, function(err, pkgjson) {\n      if (err) return done(err)\n\n      try {\n        pkgjson = JSON.parse(pkgjson)\n      } catch(e) { return done(e) }\n\n      var transforms = (\n           pkgjson['glslify']\n        && pkgjson['glslify']['transform']\n        || []\n      )\n\n      transforms = transforms.map(function(key) {\n        var transform = Array.isArray(key)\n          ? key\n          : [key, {}]\n\n        var key = transform[0]\n        var opt = transform[1]\n\n        if (opt) {\n          delete opt.global\n          delete opt.post\n        }\n\n        return { tr: key, opts: opt, name: key }\n      }).map(function(tr) {\n        tr.tr = self.resolveTransform(tr.tr)\n        return tr\n      })\n\n      register(transforms)\n    })\n  })\n\n  function register(transforms) {\n    done(null, trCache[fileDir] = trLocal\n      .concat(transforms)\n      .concat(self._globalTransforms))\n  }\n}\n\n/**\n * Resolves a transform.\n *\n * Functions are retained as-is.\n * Strings are resolved using node's `require` resolution algorithm,\n * and then required directly.\n *\n * @param {String|Function} transform\n */\nDepper.prototype.resolveTransform = function(transform) {\n  if (typeof transform === 'string') {\n    transform = nodeResolve.sync(transform, {\n      basedir: this._cwd\n    })\n\n    transform = require(transform)\n  }\n\n  return transform\n}\n\n/**\n * Applies a transform to a string.\n *\n * Note that transforms here are passed in differently to other methods:\n * - `tr.tr` should point to the transform function.\n * - `tr.opts` should contain the options for the transform, if applicable.\n *\n * @param {String} filename The absolute path of the file you're transforming.\n * @param {String} src The shader source you'd like to transform.\n * @param {Array} transforms The transforms you'd like to apply.\n * @param {Function} done(err, transformed)\n */\nDepper.prototype.applyTransforms = function(filename, src, transforms, done) {\n  var i = 0\n\n  next(null, src)\n  function next(err, updated) {\n    if (err) return done(err)\n    if (i >= transforms.length) return done(null, updated)\n\n    var tr = transforms[i++]\n    var opts = tr.opts\n\n    if (!opts || typeof opts !== 'object') opts = {}\n    tr.tr(filename, updated+'', tr.opts, next)\n  }\n}\n\nfunction glslifyPreprocessor(data) {\n  return /#pragma glslify:/.test(data)\n}\n\nfunction glslifyExport(data) {\n  return /#pragma glslify:\\s*export\\(([^\\)]+)\\)/.exec(data)\n}\n\nfunction glslifyImport(data) {\n  return /#pragma glslify:\\s*([^=\\s]+)\\s*=\\s*require\\(([^\\)]+)\\)/.exec(data)\n}\n\nfunction defaultRead(src, done) {\n  fs.readFile(src, 'utf8', done)\n}\n\nfunction cacheWrap(read, cache) {\n  // resolve all cached files such that they match\n  // all of the paths glslify handles, which are otherwise\n  // absolute\n  cache = Object.keys(cache).reduce(function(newCache, file) {\n    newCache[path.resolve(file)] = cache[file]\n    return newCache\n  }, {})\n\n  return function readFromCache(filename, done) {\n    if (!cache[filename]) {\n      return read(filename, done)\n    }\n\n    process.nextTick(function() {\n      done(null, cache[filename])\n    })\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Depper","opts","Emitter","call","cwd","_deps","_cwd","process","_cache","_i","_transforms","_trCache","_fileCache","files","_globalTransforms","_readFile","cacheWrap","readFile","defaultRead","resolve","glslResolve","Error","src","done","fs","read","cache","Object","keys","reduce","newCache","file","path","readFromCache","filename","nextTick","tokenize","findup","map","inherits","nodeResolve","inlineName","Math","random","inlineSource","prototype","inline","Depper.prototype.inline","source","basedir","inlineFile","add","err","tree","transform","Depper.prototype.transform","name","list","post","resolveTransform","push","tr","Depper.prototype.add","extractPreprocessors","tokens","dep","i","length","token","type","data","test","exp","exec","imp","imports","resolveImports","resolved","next","importName","split","shift","trim","replace","self","deps","id","dirname","entry","getTransformsForFile","trs","emit","applyTransforms","setTimeout","Depper.prototype.readFile","basename","Depper.prototype.getTransformsForFile","register","transforms","trCache","fileDir","trLocal","concat","entryDir","relative","sep","indexOf","found","message","pkg","join","pkgjson","JSON","parse","e","key","Array","isArray","opt","Depper.prototype.resolveTransform","sync","Depper.prototype.applyTransforms","updated"]
}
