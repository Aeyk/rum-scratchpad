shadow$provide.module$node_modules$$choojs$findup$index=function(global,require,module,exports){function fsExists(file,cb){if(!fs.access)return fs.exists(file,cb);fs.access(file,function(err){cb(err?!1:!0)})}function FindUp(dir$jscomp$0,iterator,options,callback){if(!(this instanceof FindUp))return new FindUp(dir$jscomp$0,iterator,options,callback);"function"===typeof options&&(callback=options,options={});options=options||{};EE.call(this);this.stopPlease=this.found=!1;var self=this;if("string"===
typeof iterator){var file=iterator;iterator=function(dir,cb){return fsExists(Path.join(dir,file),cb)}}callback&&(this.on("found",function(dir){options.verbose&&console.log("found "+dir);callback(null,dir);self.stop()}),this.on("end",function(){options.verbose&&console.log("end");self.found||callback(Error("not found"))}),this.on("error",function(err){options.verbose&&console.log("error",err);callback(err)}));this._find(dir$jscomp$0,iterator,options,callback)}var fs=require("shadow$empty"),Path=require("module$node_modules$path_browserify$index");
global=require("module$node_modules$util$util");var EE=require("module$node_modules$events$events").EventEmitter;module.exports=function(dir,iterator,options,callback){return FindUp(dir,iterator,options,callback)};global.inherits(FindUp,EE);FindUp.prototype._find=function(dir,iterator,options,callback,currentDepth){var self=this;"number"!==typeof currentDepth&&(currentDepth=0);iterator(dir,function(exists){options.verbose&&console.log("traverse "+dir);if("number"===typeof options.maxdepth&&0<=options.maxdepth&&
currentDepth>options.maxdepth)return self.emit("end");currentDepth++;exists&&(self.found=!0,self.emit("found",dir));exists=Path.join(dir,"..");if(self.stopPlease||dir===exists)return self.emit("end");if(-1!==dir.indexOf("../../"))return self.emit("error",Error(dir+" is not correct."));self._find(exists,iterator,options,callback,currentDepth)})};FindUp.prototype.stop=function(){this.stopPlease=!0};module.exports.FindUp=FindUp;module.exports.sync=function(dir$jscomp$0,iteratorSync,options){if("string"===
typeof iteratorSync){var file=iteratorSync;iteratorSync=function(dir){a:if(dir=Path.join(dir,file),fs.accessSync){try{fs.accessSync(dir)}catch(err){dir=!1;break a}dir=!0}else dir=fs.existsSync(dir);return dir}}options=options||{};for(var initialDir=dir$jscomp$0,currentDepth=0;dir$jscomp$0!==Path.join(dir$jscomp$0,"..")&&!("number"===typeof options.maxdepth&&0<=options.maxdepth&&currentDepth>options.maxdepth);){currentDepth++;if(-1!==dir$jscomp$0.indexOf("../../"))throw Error(initialDir+" is not correct.");
if(iteratorSync(dir$jscomp$0))return dir$jscomp$0;dir$jscomp$0=Path.join(dir$jscomp$0,"..")}throw Error("not found");}}
//# sourceMappingURL=module$node_modules$$choojs$findup$index.js.map
