{
"version":3,
"file":"module$node_modules$source_map$lib$mapping_list.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,+CAAf,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6B5GC,QAASA,YAAW,EAAG,CACrB,IAAA,CAAKC,MAAL,CAAc,EACd,KAAA,CAAKC,OAAL,CAAe,CAAA,CAEf,KAAA,CAAKC,KAAL,CAAa,CAACC,cAAe,EAAhB,CAAoBC,gBAAiB,CAArC,CAJQ,CArBvB,IAAIC,KAAOT,OAAA,CAAQ,yCAAR,CAkCXG,YAAA,CAAYO,SAAZ,CAAsBC,eAAtB,CACEC,QAA4B,CAACC,SAAD,CAAYC,QAAZ,CAAsB,CAChD,IAAA,CAAKV,MAAL,CAAYW,OAAZ,CAAoBF,SAApB,CAA+BC,QAA/B,CADgD,CASpDX,YAAA,CAAYO,SAAZ,CAAsBM,GAAtB,CAA4BC,QAAwB,CAACC,QAAD,CAAW,CAClCZ,IAAAA,SAAAA,IAAAA,CAAKA,KAALA,CArCvBa,MAAQC,QAARD,CAAiBZ,aAqCMD,CApCvBe,MAoCmCH,QApCnCG,CAAiBd,aAoCMD,CAnCvBgB;AAAUF,QAAVE,CAAmBd,eAmCIF,CAlCvBiB,QAkCmCL,QAlCnCK,CAAmBf,eAChBa,MAiCP,CAjCeF,KAiCf,EAjCwBE,KAiCxB,EAjCiCF,KAiCjC,EAjC0CI,OAiC1C,EAjCqDD,OAiCrD,EAhCuE,CAgCvE,EAhCOb,IAAA,CAAKe,mCAAL,CAAyCJ,QAAzC,CAgCgCF,QAhChC,CAgCP,CACE,IADF,CACOZ,KADP,CACeY,QADf,CAIE,IAJF,CAIOb,OAJP,CAIiB,CAAA,CAFf,KAAA,CAAKD,MAAL,CAAYqB,IAAZ,CAAiBP,QAAjB,CAH2D,CAmB/Df,YAAA,CAAYO,SAAZ,CAAsBgB,OAAtB,CAAgCC,QAA4B,EAAG,CACxD,IAAL,CAAUtB,OAAV,GACE,IAAA,CAAKD,MAAL,CAAYwB,IAAZ,CAAiBnB,IAAjB,CAAsBe,mCAAtB,CACA,CAAA,IAAA,CAAKnB,OAAL,CAAe,CAAA,CAFjB,CAIA,OAAO,KAAP,CAAYD,MALiD,CAQ/DF,QAAA,CAAQC,WAAR,CAAsBA,WA/EsF;",
"sources":["node_modules/source-map/lib/mapping-list.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$source_map$lib$mapping_list\"] = function(global,require,module,exports) {\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n\n};"],
"names":["shadow$provide","global","require","module","exports","MappingList","_array","_sorted","_last","generatedLine","generatedColumn","util","prototype","unsortedForEach","MappingList.prototype.unsortedForEach","aCallback","aThisArg","forEach","add","MappingList.prototype.add","aMapping","lineA","mappingA","lineB","columnA","columnB","compareByGeneratedPositionsInflated","push","toArray","MappingList.prototype.toArray","sort"]
}
