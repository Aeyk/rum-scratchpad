shadow$provide.module$node_modules$resolve$lib$sync=function(global,require,module,exports){var process=require("module$node_modules$process$browser"),isCore=require("module$node_modules$is_core_module$index"),fs=require("shadow$empty"),path=require("module$node_modules$path_browserify$index"),caller=require("module$node_modules$resolve$lib$caller"),nodeModulesPaths=require("module$node_modules$resolve$lib$node_modules_paths"),normalizeOptions=require("module$node_modules$resolve$lib$normalize_options"),
realpathFS=fs.realpathSync&&"function"===typeof fs.realpathSync.native?fs.realpathSync.native:fs.realpathSync,defaultIsFile=function(file){try{var stat=fs.statSync(file)}catch(e){if(e&&("ENOENT"===e.code||"ENOTDIR"===e.code))return!1;throw e;}return stat.isFile()||stat.isFIFO()},defaultIsDir=function(dir){try{var stat=fs.statSync(dir)}catch(e){if(e&&("ENOENT"===e.code||"ENOTDIR"===e.code))return!1;throw e;}return stat.isDirectory()},defaultRealpathSync=function(x){try{return realpathFS(x)}catch(realpathErr){if("ENOENT"!==
realpathErr.code)throw realpathErr;}return x},maybeRealpathSync=function(realpathSync,x,opts){return opts&&!1===opts.preserveSymlinks?realpathSync(x):x};module.exports=function(x$jscomp$0,options){function loadAsFileSync(x){var pkg=loadpkg(path.dirname(x));if(pkg&&pkg.dir&&pkg.pkg&&opts.pathFilter){var rfile=path.relative(pkg.dir,x);(rfile=opts.pathFilter(pkg.pkg,x,rfile))&&(x=path.resolve(pkg.dir,rfile))}if(isFile(x))return x;for(pkg=0;pkg<extensions.length;pkg++)if(rfile=x+extensions[pkg],isFile(rfile))return rfile}
function loadpkg(dir){if(""!==dir&&"/"!==dir&&!("win32"===process.platform&&/^\w:[/\\]*$/.test(dir)||/[/\\]node_modules[/\\]*$/.test(dir))){var pkgfile=path.join(maybeRealpathSync(realpathSync,dir,opts),"package.json");if(!isFile(pkgfile))return loadpkg(path.dirname(dir));pkgfile=readFileSync(pkgfile);try{var pkg=JSON.parse(pkgfile)}catch(jsonErr){}pkg&&opts.packageFilter&&(pkg=opts.packageFilter(pkg,dir));return{pkg,dir}}}function loadAsDirectorySync(x){var pkgfile=path.join(maybeRealpathSync(realpathSync,
x,opts),"/package.json");if(isFile(pkgfile)){try{var body=readFileSync(pkgfile,"UTF8"),pkg=JSON.parse(body)}catch(e){}pkg&&opts.packageFilter&&(pkg=opts.packageFilter(pkg,x));if(pkg&&pkg.main){if("string"!==typeof pkg.main)throw x=new TypeError("package “"+pkg.name+"” `main` must be a string"),x.code="INVALID_PACKAGE_MAIN",x;if("."===pkg.main||"./"===pkg.main)pkg.main="index";try{var m=loadAsFileSync(path.resolve(x,pkg.main));if(m)return m;var n=loadAsDirectorySync(path.resolve(x,pkg.main));if(n)return n}catch(e){}}}return loadAsFileSync(path.join(x,
"/index"))}function loadNodeModulesSync(x,start){var thunk=function(){for(var dirs=nodeModulesPaths(start,opts,x),i=0;i<dirs.length;i++)dirs[i]=path.join(dirs[i],x);return dirs};thunk=packageIterator?packageIterator(x,start,thunk,opts):thunk();for(var i$jscomp$0=0;i$jscomp$0<thunk.length;i$jscomp$0++){var dir=thunk[i$jscomp$0];if(isDirectory(path.dirname(dir))){var m=loadAsFileSync(dir);if(m)return m;if(dir=loadAsDirectorySync(dir))return dir}}}if("string"!==typeof x$jscomp$0)throw new TypeError("Path must be a string.");
var opts=normalizeOptions(x$jscomp$0,options),isFile=opts.isFile||defaultIsFile,readFileSync=opts.readFileSync||fs.readFileSync,isDirectory=opts.isDirectory||defaultIsDir,realpathSync=opts.realpathSync||defaultRealpathSync,packageIterator=opts.packageIterator,extensions=opts.extensions||[".js"],includeCoreModules=!1!==opts.includeCoreModules,basedir=opts.basedir||path.dirname(caller());options=opts.filename||basedir;opts.paths=opts.paths||[];basedir=maybeRealpathSync(realpathSync,path.resolve(basedir),
opts);if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x$jscomp$0)){includeCoreModules=path.resolve(basedir,x$jscomp$0);if("."===x$jscomp$0||".."===x$jscomp$0||"/"===x$jscomp$0.slice(-1))includeCoreModules+="/";if(includeCoreModules=loadAsFileSync(includeCoreModules)||loadAsDirectorySync(includeCoreModules))return maybeRealpathSync(realpathSync,includeCoreModules,opts)}else{if(includeCoreModules&&isCore(x$jscomp$0))return x$jscomp$0;if(includeCoreModules=loadNodeModulesSync(x$jscomp$0,basedir))return maybeRealpathSync(realpathSync,
includeCoreModules,opts)}x$jscomp$0=Error("Cannot find module '"+x$jscomp$0+"' from '"+options+"'");x$jscomp$0.code="MODULE_NOT_FOUND";throw x$jscomp$0;}}
//# sourceMappingURL=module$node_modules$resolve$lib$sync.js.map
