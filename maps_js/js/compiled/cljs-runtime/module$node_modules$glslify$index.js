shadow$provide.module$node_modules$glslify$index=function(global,require,module,exports){function iface(){function compile(src,opts){opts||(opts={});src=gdeps(opts).inline(src,opts.basedir||basedir);return bundle(src)}function gdeps(opts){opts||(opts={});var depper=glslifyDeps({cwd:opts.basedir||basedir});opts=opts.transform||[];opts=Array.isArray(opts)?opts:[opts];opts.forEach(function(transform){transform=Array.isArray(transform)?transform:[transform];var name=transform[0];transform=transform[1]||
{};transform.post?posts.push({name,opts:transform}):depper.transform(name,transform)});return depper}function bundle(deps){var source=glslifyBundle(deps);posts.forEach(function(tr){"function"===typeof tr.name?tr=tr.name:(tr=nodeResolve.sync(tr.name,{basedir}),tr=require(tr));(tr=tr(deps&&deps[0]&&deps[0].file||null,source,{post:!0}))&&(source=tr)});return source}try{var basedir=path.dirname(stackTrace.get()[2].getFileName())}catch(err){basedir=process.cwd()}var posts=[];return{tag:function(strings){"string"===
typeof strings&&(strings=[strings]);for(var exprs=[].slice.call(arguments,1),parts=[],i=0;i<strings.length-1;i++)parts.push(strings[i],exprs[i]||"");parts.push(strings[i]);return compile(parts.join(""))},compile,file:function(filename,opts){opts||(opts={});filename=gdeps(opts).add(path.resolve(opts.basedir||basedir,filename));return bundle(filename)}}}var process=require("module$node_modules$process$browser"),glslifyBundle=require("module$node_modules$glslify_bundle$index"),glslifyDeps=require("module$node_modules$glslify_deps$sync"),
nodeResolve=require("module$node_modules$resolve$index"),path=require("module$node_modules$path_browserify$index");require("module$node_modules$xtend$immutable");var stackTrace=require("module$node_modules$stack_trace$lib$stack_trace");module.exports=function(arg,opts){var isShaderString=/(void\s+main\s?\(.*\)|\n)/.test(arg);if(Array.isArray(arg))return iface().tag.apply(null,arguments);if("string"===typeof arg&&!isShaderString&&opts&&opts._flags)return require("module$node_modules$glslify$transform").apply(this,
arguments);if("string"===typeof arg&&isShaderString)return iface().compile(arg,opts);if("string"===typeof arg)return iface().file(arg,opts);throw Error("unhandled argument type: "+typeof arg);};module.exports.compile=function(src,opts){return iface().compile(src,opts)};module.exports.file=function(file,opts){return iface().file(file,opts)}}
//# sourceMappingURL=module$node_modules$glslify$index.js.map
